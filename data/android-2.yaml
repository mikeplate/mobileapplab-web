title: Views
description: >
    Use the built in user interface components. Learn about the basic views and how to layout and style
    them.
menu:
- title: Lecture Presentation
  heading: 2. Views
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Goals
    menu:
    - Learn how to build a complete layout with nested LinearLayouts
    - Get a basic understanding of some common Views
    - Change the appearance of your Views
    - Understand how resources and qualifiers work
    - Store single values persistantly
    - title: Classes and methods introduced in this chapter
      description: >
        LinearLayout, EditText, CheckBox, ImageView, Spinner, SharedPreferences, addView
  - title: Layouts
    menu:
    - title: The layout element is responsible for laying out its child elements
      description: >
        Determines width and height of each child element, and how to position them in relation to
        one another. Different layout classes uses different attributes and rules when performing 
        this operation.
    - title: Layouts are defined using ViewGroup-derived classes
      menu:
      - title: LinearLayout
      - title: RelativeLayout
      - title: TableLayout
      - title: FrameLayout
      - title: GridLayout (from Android 4.0)
  - title: Layouts in this course
    menu:
    - title: RelativeLayout is the default in the latest project template in the Android SDK
      description: >
        Actually LinearLayout was the previous default and I still think of LinearLayout as the simplest
        layout to understand and use.
    - title: We'll try and limit ourselves to LinearLayout for simplicity reasons
      description: >
        By combining LinearLayout objects inside a container that is also a LinearLayout, most (all?)
        layouts we'll need can be accomplished
  - title: LinearLayout attributes
    menu:
    - title: orientation
      description: >
        Specify "horizontal" or "vertical" depending on in which direction all children should be layed out
    - title: Nesting
      menu:
      - title: Create LinearLayout inside of a LinearLayout
      - title: Forms a "Grid"
      - title: Usually the orientation changes
      - title: The child LinearLayout has child attributes like other child Views
  - title: LinearLayout layout attributes for children
    menu:
    - title: layout_width
      menu:
      - title: wrap_content to let the contents of the view decide the width
      - title: match_parent to have the width of the child extended to the maximum width of the layout
      - title: 0px to have it automatically extend according to layout_weight
    - title: layout_height
      description: >
        Same as layout_width, but for the height of course. Usually for a layout with horizontal
        orientation it doesn't make any sense to have any child specify layout_width as fill_parent and
        vice versa.
    - title: layout_gravity
      description: >
        If the layout_width/layout_height hasn't extended the size of the child view to the full width/height
        of the layout, this value will determine to which edge to align the child view.
    - title: layout_margin
      description: >
        Specify a value here to have extra space between the child view's contents and any surrounding child
        views.
  - title: Automatic expansion with layout_weight
    menu:
    - title: One or more views can be automatically distributed evenly across the width or height
    - title: Equivalent to setting layout_width or layout_height to percentages of the container
      description: >
        Since percentages are not valid for these attributes
    - title: Two steps
      menu:
      - title: Set the layout_width/layout_height to "0px"
      - title: Set the layout_weight to a number
    - title: >
        All children with a "0px" size will be expanded relative their layout_weight
  - title: View
    menu:
    - title: Use just the base View object when a drawable is all you need
    - title: Can also be useful when padding/extending empty areas in a user interface
    - title: Or to simluate lines/dividers in the user interface
  - title: EditText
    menu:
    - title: Input field where user can enter text, numbers etc
    - title: inputType
      menu:
      - title: Defines what type of content can be typed in the field
      - title: Also means that different virtual keyboards can be displayed
      - title: Many options exist, like "text", "textMultiLine", "textPassword", "number", "phone"
      - title: Can also be combined with flags like "textAutoCorrect"
    - title: Read/write current value in Java
      language: java
      code: |
        String value = _textView.getText().toString();
        _textView.setText("Hello, world!");
  - title: CheckBox
    menu:
    - title: Input field with a checkmark and text
    - title: checked
      menu:
      - title: The default value of the field, "true" och "false"
    - title: CheckedTextView
      description: >
        Can be used instead of CheckBox if you want the check mark to the right of the text
    - title: Read/write current value in Java
      language: java
      code: |
        if (_checkBox.isChecked())
          _checkBox.setChecked(false);
  - title: ImageView
    menu:
    - title: Display an image
  - title: Spinner
    menu:
    - title: Drop list of options
  - title: Styling Views in Android
    menu:
    - title: The styling system is not as versatile as CSS in the HTML world, but there are a few similar concepts
    - title: Change style of View by setting attributes on the xml element
    - title: Multiple attributes can be collected into a Style
      description: >
        A Style and its attributes are put in its own xml file and referenced in the View element. An
        Android Style is somewhat similar to a CSS class.
    - title: Themes is a way to apply multiple styles automatically for an Activity
      description: >
        Themes are specified on the Activity (or the Application as a whole). Themes are also the way for
        different Android platform versions to update its appearence of the same View objects.
        An Android Theme is somewhat similar to a CSS stylesheet.
    - title: We'll skip most of Style and Themes for simplicity reasons in this course
  - title: General View attributes
    menu:
    - title: textColor
    - title: textSize
    - title: background
    - title: padding
      description: >
        Can be specifed as a single attribute, or in individual components paddingLeft, paddingTop,
        paddingRight and paddingBottom
    - title: gravity
      description: >
        How content inside of the View is aligned horizontally and vertically. Two values can be
        combined with the pipe "|" character.
  - title: Units
    menu:
    - title: Units that can be used when specifying sizes like padding, margin, layout_width etc
    - title: px
      description: >
        Screen pixels. 1px is simply always one pixel on the screen.
    - title: dp (or dip)
      description: >
        Density-independent pixels. This unit is based on the physical density of the screen, relative to a
        screen with 160 pixels/inch. A size with this unit should have the same physical size on all
        screens from tiny 3 inch to tablet 10 inch sizes, independently of the pixel resolution of those
        screens. This is the recommended unit for all sizes except textSize.
    - title: sp
      description: >
        Size-independent pixels. This is like the dp unit, but is also scaled according to an optional
        user setting for font size. This is the recommended unit for textSize.
    - title: Colors are specified as hex values with 6 characters plus the # prefix, like "#aa0045".
  - title: Drawables
    menu:
    - title: Drawables are an abstraction in Android for handling backgrounds, images and other "drawable" things
  - title: Rounded corners
    menu:
    - title: Not as easy as a single attribute
      description: >
        Depends on the Drawable feature
  - title: Gradient backgrounds
  - title: Resource Qualifiers
    menu:
    - title: A qualifier is a condition that can be used to determine which specific resource file to use
    - title: Qualified resource files have the same file name, but are put in different folders
    - title: The folder determines the qualifier, what to check and what value to trigger the particular file
    - title: The folder names is usually enough to realize what the qualifier is
    - title: Adding Android XML File in Eclipse will use a dialog wizard to help you specify the qualifier
  - title: Qualifier use cases
    menu:
    - title: Landscape/Portrait orientation of device
      description: >
        Specify a different layout for landscape orientation, taking into the account that there is more
        space horizontally than vertically.
    - title: Tablet devices (screen size/resolution)
        Specify a different layout when there is more display space on the device, like on 7 or 10 inch
        tablet compared to a phone.
    - title: Language of device
      description: >
        Usually only used for texts in the user interface, even though you could use it for other resources too.
  - title: Strings and language support
    menu:
    - title: If you have any ambition to translate your application into more than one language
      description: >
        Make sure NO string literals for user interface text is stored in Java
    - title: All user interface text should be string resources
    - title: Stored as resource xml files in res/values/strings.xml
      language: xml
      code: |
        <item name="msg">Welcome to this application!</item>
    - title: Reference in layout xml files
      language: xml
      code: |
        <TextView android:text="@strings/msg" />
    - title: Reference in Java
      language: java
      code: |
        _textView.setText(R.strings.msg);
  - title: SharedPreferences to store simple values
    menu:
    - title: Store a single primitive type or a String persistantly
      description: >
        We'll look at storing more complex objects in a later chapter on data
    - title: A good time
      menu:
      - title: To write the value is whenever the value changes
      - title: To read the value is in the onCreate method of the Activity
    - title: Write a value
      language: java
      code: |
        String name = "Mike";
        SharedPreferences.Editor storage = 
          getSharedPreferences("mydata", MODE_PRIVATE).edit();
        storage.putString("name", name);
        storage.commit();
    - title: Read a value
      language: java
      code: |
        SharedPreferences storage = getSharedPreferences("mydata");
        String name = storage.getString("name", "");

- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment 1 (mandatory)
    menu:
    - title: Simple launcher
      description: >
        Description
  - title: Assignment 2 (optional)
    menu:
    - title: Clipboard
      description: >
        Description
  - title: Assignment 3 (optional)
    menu:
    - title: String resource
      description: >
        Description

- title: ConverterApp Example
  description: >
    Convert between different units like meter/feet, celsius/fahrenheit. Demonstrates different types of
    visual elements and accessing those objects in the user interface from your Java code.
