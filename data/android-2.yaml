title: Views
description: >
    Use the built in user interface components. Learn about the basic views and how to layout and style
    them.
menu:
- title: Lecture Presentation
  heading: 2. Views
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Content
    menu:
    - Layouts
    - Views
    - Styles
    - Resources
    - Qualifiers
  - title: Layouts
    menu:
    - title: The layout element is responsible for laying out its child elements
      description: >
        Determines width and height of each child element, and how to position them in relation to
        one another. Different layout classes uses different attributes and rules when performing 
        this operation.
    - title: Layouts are defined using ViewGroup-derived classes
      menu:
      - title: LinearLayout
      - title: RelativeLayout
      - title: TableLayout
      - title: FrameLayout
  - title: Layouts in this course
    menu:
    - title: RelativeLayout is the default in the latest project template in the Android SDK
      description: >
        Actually LinearLayout was the previous default and I still think of LinearLayout as the simplest
        layout to understand and use.
    - title: We'll try and limit ourselves to LinearLayout for simplicity reasons
      description: >
        By combining LinearLayout objects inside a container that is also a LinearLayout, most (all?)
        layouts we'll need can be accomplished
  - title: ViewGroup common methods
    menu:
    - title: Methods in the ViewGroup class are shared by all layout classes
      description: >
        That's the way inheritance work in an object-oriented programming language like Java
    - title: findViewById
      description: >
        Search the children of the ViewGroup for a view with the specified numerical identifier
    - title: addView
      description: >
        Dynamically add new children to the ViewGroup after the application has started
  - title: LinearLayout attributes
    menu:
    - title: orientation
      description: >
        Specify "horizontal" or "vertical" depending on in which direction all children should be layed out
  - title: LinearLayout child view attributes for size
    menu:
    - title: layout_width
      menu:
      - title: wrap_content to let the contents of the view decide the width
      - title: match_parent to have the width of the child extended to the maximum width of the layout
      - title: 0px to have it automatically extend according to layout_weight
    - title: layout_height
      description: >
        Same as layout_width, but for the height of course. Usually for a layout with horizontal
        orientation it doesn't make any sense to have any child specify layout_width as fill_parent and
        vice versa.
    - title: layout_weight
      description: >
        Set a relative value here if the child view has 0px specified as layout_width or layout_height. Then
        the width/height will be extended to fill any remaining area of the layout. When more than one child
        view has 0px, they will extend more or less according to their relative value for layout_weight.
  - title: LinearLayout child view attributes for placement
    menu:
    - title: layout_gravity
      description: >
        If the layout_width/layout_height hasn't extended the size of the child view to the full width/height
        of the layout, this value will determine to which edge to align the child view.
    - title: layout_margin
      description: >
        Specify a value here to have extra space between the child view's contents and any surrounding child
        views.
  - title: Basic View elements
    menu:
    - title: Button
    - title: TextView
    - title: EditText
    - title: CheckBox
    - title: ImageView
    - title: Spinner
  - title: Button
    menu:
    - title: text
      description: >
        The text to show inside of the Button
    - title: onClick
      description: >
        A special case where an event handler can be specified as an attribute. The Button is the only
        element where this is possible.
  - title: Styling Views in Android
    menu:
    - title: The styling system is not as versatile as CSS in the HTML world, but there are a few similar concepts
    - title: Change style of View by setting attributes on the xml element
    - title: Multiple attributes can be collected into a Style
      description: >
        A Style and its attributes are put in its own xml file and referenced in the View element. An
        Android Style is somewhat similar to a CSS class.
    - title: Themes is a way to apply multiple styles automatically for an Activity
      description: >
        Themes are specified on the Activity (or the Application as a whole). Themes are also the way for
        different Android platform versions to update its appearence of the same View objects.
        An Android Theme is somewhat similar to a CSS stylesheet.
    - title: We'll skip most of Style and Themes for simplicity reasons in this course
  - title: Basic View attributes
    menu:
    - title: textColor
    - title: textSize
    - title: background
    - title: padding
    - title: gravity
  - title: Drawables
    menu:
    - title: Drawables are an abstraction in Android for handling backgrounds, images and other "drawable" things
  - title: Rounded corners
    menu:
    - title: Not as easy as a single attribute
      description: >
        Depends on the Drawable feature
  - title: View object
    menu:
    - title: Use just the base View object when a drawable is all you need
    - title: Can also be useful when padding/extending empty areas in a user interface
    - title: Or to simluate lines/dividers in the user interface
  - title: Image object
  - title: Resource Qualifiers
    menu:
    - title: A qualifier is a condition that can be used to determine which specific resource file to use
    - title: Qualified resource files have the same file name, but are put in different folders
    - title: The folder determines the qualifier, what to check and what value to trigger the particular file
    - title: The folder names is usually enough to realize what the qualifier is
    - title: Adding Android XML File in Eclipse will use a dialog wizard to help you specify the qualifier
  - title: Qualifier use cases
    menu:
    - title: Landscape/Portrait orientation of device
      description: >
        Specify a different layout for landscape orientation, taking into the account that there is more
        space horizontally than vertically.
    - title: Tablet devices (screen size/resolution)
        Specify a different layout when there is more display space on the device, like on 7 or 10 inch
        tablet compared to a phone.
    - title: Language of device
      description: >
        Usually only used for texts in the user interface, even though you could use it for other resources too.
  - title: Strings and language support
  - title: SharedPreferences to store simple values

- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment 1 (mandatory)
    menu:
    - title: Simple launcher
      description: >
        Description
  - title: Assignment 2 (optional)
    menu:
    - title: Clipboard
      description: >
        Description
  - title: Assignment 3 (optional)
    menu:
    - title: String resource
      description: >
        Description
- title: Example
  type: demo
  description: >
    Description
