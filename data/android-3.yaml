title: Events
description: >
    React to events that happen in the device. Learn about different ways of responding to user interface
    events.
menu:
- title: Lecture Presentation
  heading: 3. Events
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Goals
    menu:
    - Understand how events can be handled in your application
    - Respond to View and Activity events
    - Create and respond to Menu options
    - Start your own Activity and get a response back
    - Store single values persistantly
    - Animate the appearence of a View
  - title: Examples of some object types and the events they may fire
    menu:
    - title: Activity
      menu:
      - title: Created, paused, resumed, stopped, destroyed
      - title: Back button pressed
      - title: Menu item chosen by user
      - title: Started sub-activity has returned with a result
    - title: View and derived views
      menu:
      - title: Content/selection of view has changed
      - title: User has touched somewhere in the view
    - title: System
      menu:
      - title: Incoming call
      - title: Received sms message
      - title: Battery level low
  - title: Ways to handle an event in Java
    menu:
    - title: By extending a base class (deriving)
      menu:
      - title: Extend your own class from a base class with overridable methods
      - title: Override the base class method with your own
      - title: One class can only be derived from one single base class
    - title: By implementing interface
      menu:
      - title: Declare that your class implements the interface
      - title: Define the implementation of all methods in the interface
      - title: Specify your object to a method on the firing object
      - title: One class can implement any number of interfaces, but only have one implementation for a particular interface
  - title: Example of event handler as overridden method
    menu:
    - title: onBackPressed is fired when back button is pressed on device
      language: java
      code: |
        public class MyActivity extends Activity {
          @Override
          public void onBackPressed() {
          }
        }
    - title: Method name, return type and argument types must be exactly right
    - title: Attribute @Override is optional
      description: >
        Recommended to use since it will tell you if the method does not exist in the base class
        (if you've spelled it wrong)
  - title: Example of event handler by implementing interface
    menu:
    - title: No @Override attribute - not applicable
    - title: Declare that Activity implements interface
      language: java
      code: |
        public class MyActivity extends Activity implements OnClickListener {
    - title: Define the method
      language: java
      code: |
        public void onClick(View view) {
        }
    - title: Method name, return type and argument types must be exactly right
    - title: Bind the event handler (our object that implements the interface) to an event
      language: java
      code: |
        Button btn = (Button)findViewById(R.id.save);
        btn.setOnClickListener(this);
  - title: Example of event handler in anonymous class
    menu:
    - title: >
        When implementing an interface, you can also create a new anonymous class which primary/only
        purpose is to respond to events. Only one statement necessary.
    - title: Create an anonymous object and bind it to the event source
      language: java
      code: |
        btn.setOnClickListener(new OnClickListener() {
          public void onClick(View view) {
          }
        });
    - title: Inside onClick, "this" is the anonymous object
      description: >
        If you need the outer this (usually the Activity) reference it with class.this, like
        "Activity.this".
  - title: Single event handler for multiple source views
    menu:
    - title: >
        Sometimes desirable to have a single event handler in your code for more than one
        view that fires the same type of event
    - title: Source view is almost always specified as an argument to the event handler
    - title: Identify a particular source view
      menu:
      - title: Use the id of the view
      - title: Use the fact that all views can have extra data associated with it
    - title: Associate extra data with a view in xml
      language: xml
      code: |
        <TextView android:id="@+id/thousand" android:tag="1000"
    - title: Check the extra data in Java
      language: java
      code: |
        public void onTouch(View src, MotionEvent event) {
          int value = Integer.parseInt((String)src.getTag());
          if (src.getId()==R.id.thousand) {
          }
        }
  - title: Activity lifetime events
    menu:
    - title: Events fired by the Activity and handled by overriding methods in your own Activity class
    - title: onCreate
      description: >
        Already used. Fired once when the Activity is first created.
    - title: onStart
      description: >
        Fired when the user navigates back to the Activity after running some other Activity
    - title: onResume
      description: >
        Fired when the Activity receives focus again after losing it to something like a Dialog
        and also as a follow up to onStart
    - title: onPause
      description: >
        Fired when the Activity loses focus, either because of something like a Dialog or because of
        the user navigating to another Activity
    - title: onStop
      description: >
        Fired when the user navigates to another Activity
    - title: onDestroy
      description: >
        Fired when the Activity is about to be destroyed (exiting/haven't been used in a while)
  - title: Other Activity events
    menu:
    - title: onBackPressed
      description: >
        Fired when the physical back button of the device is pressed. (No event exists for the
        physical home button.)
  - title: General View event interfaces
    menu:
    - title: OnClickListener
      menu:
      - title: This event is fired when the user has touched and released a finger on the view
      - title: void onClick(View src)
    - title: OnTouchListener
      menu:
      - title: This event is fired when the user touches, moves and releases any amount of fingers on the view
      - title: boolean onTouch(View src, MotionEvent event)
    - title: OnLongClickListener
      menu:
      - title: This event is fired when the user touches and holds an amount of time on the view
      - title: boolean onLongClick(View src)
  - title: EditText event interfaces
    menu:
    - title: TextChanged
      menu:
      - title: This event is fired when the user has changed the contents of the EditText
      - title: A bit different naming convention than other view event interfaces
    - title: addTextChangedListener
      menu:
      - title: Call this method on the EditText object to specify the receiving object
    - title: TextWatcher
      menu:
      - title: Interface with multiple event handler methods
      - title: void beforeTextChanged(CharSequence text, int start, int count, int after)
      - title: void onTextChanged(CharSequence text, int start, int before, int count)
      - title: void afterTextChanged(Editable src)
  - title: Spinner
  - title: SeekBar
    menu:
    - title: Visual element with a knob that you move between endpoints to set a value
    - title: Attributes
  - title: SeekBar event interfaces
    menu:
    - title: OnSeekBarChangeListener
      menu:
      - title: void onStartTrackingTouch(SeekBar source)
        description: >
          Called when the user first touches the knob, before moving it
      - title: void onProgressChanged(SeekBar source, int pos, boolean byUser)
        description: >
          Called on every movement of the knob
      - title: void onStopTrackingTouch(SeekBar source)
        description: >
          Called when the user has released the knob and the operation is finished
    - title: >
        Even if you only need to catch onProgressChanged, all methods must be defined (but can be empty)
  - title: Menus
    menu:
    - title: Event sent to Activity to create options in the menu
      language: java
      code: |
        boolean onCreateOptionsMenu(Menu menu) {
        }
    - title: Event sent to Activity when user has chosen an option
      language: java
      code: |
        boolean onOptionsItemSelected(MenuItem item) {
        }
  - title: Starting another Activity and get a result back
    menu:
    - title: When returning from another Activity, onResume is always fired
      description: >
        But this event is also fired in a lot of other situations (when coming back from a call/other app etc)
    - title: Start another Activity
      language: java
      code: |
        Intent other = new Intent(this, OtherActivity.class);
        startActivityForResult(other, 123);
    - title: Result is sent to event handler onActivityResult in the Activity
      language: java
      code: |
        void onActivityResult(int requestId, int resultId, Intent result) {
          if (requestId==123) {
          }
        }
  - title: Animations
    menu:
    - title: Define the properties to be animated
      menu:
      - title: In a resource xml file, or
      - title: In code by building and setting properties of an object
    - title: What can be animated?
      menu:
      - title: Before Android 3.0, only opacity and transforms like position, size, rotation
      - title: >
          From Android 3.0, any property/attribute on a View can be animated (if its value makes sense to animate)
  - title: SharedPreferences to store simple values
    menu:
    - title: Store a single primitive type or a String persistantly
      description: >
        We'll look at storing more complex objects in a later chapter on data
    - title: A good time
      menu:
      - title: To write the value is whenever the value changes
      - title: To read the value is in the onCreate method of the Activity
    - title: Write a value
      language: java
      code: |
        String name = "Mike";
        SharedPreferences.Editor storage = 
          getSharedPreferences("mydata", MODE_PRIVATE).edit();
        storage.putString("name", name);
        storage.commit();
    - title: Read a value
      language: java
      code: |
        SharedPreferences storage = getSharedPreferences("mydata");
        String name = storage.getString("name", "");

- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment, mandatory
    description: >
      The assignment is mandatory for a passing grade in the course.
    menu:
    - title: 
      description: >
        Create an application
      menu:
      - title: >
  - title: Assignment, optional
    description: >
      Perform this optional assignment to get one (1) extra credit.
    menu:
    - title: ElectricityCost
      description: >
        Create an application that calculates how much you will pay per month in electricity cost
        depending on how many Watts you consume.
      menu:
      - title: >

#- title: ColorApp Example
#  description: >
#    Change color components red, green and blue and see the resulting color. Demonstrates the SeekBar visual
#    element and catching events that it fires so the color can be changed instantly.

