title: More about Data
description: >
  More capabilities on Android for storing and manipulating data.
menu:
- title: Lecture Presentation
  heading: 4. More about Data
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Goals
    menu:
    - Use simple file handling to store and retrieve objects persistantly
    - Use an ORM library to combine a data model with a SQLite database
    - Use AlertDialog for letting user edit data
  - title: File system access in Android
    menu:
    - title: Every app has a internal folder where files and subfolders can be created
      description: >
        This folder is protected from other apps (assuming MODE_PRIVATE)
    - title: An app can also request permissions to public storage like an SD card or USB memory
      description: >
        These folders can be accessed from all other apps. Don't store anything sensitive here!
    - title: Retrieve paths to these folders
      language: java
      code: |
        File internal = getFilesDir();
        File external = getExternalCacheDir();
    - title: File class encapsulates both files and directories
  - title: Write and read files
    menu:
    - title: Write to an internal and protected (from other apps) file
      language: java
      code: |
        String namelist = "Adam,Betty,Carl,Donna";
        FileOutputStream file = openFileOutput("data.txt", Context.MODE_PRIVATE);
        file.write(namelist.getBytes());
        file.close();
    - title: Read back from an internal file
      language: java
      code: |
        byte[] buffer = new byte[100];
        FileInputStream file = openFileInput("data.txt");
        int readcount = file.read(buffer);
        file.close();
        String namelist = new String(buffer, 0, readcount);
    - title: File system access exception handling
      menu:
      - title: Most file system calls require exception handling
    - title: Text file classes
      menu:
      - title: Handle byte/binary conversions to/from Strings
  - title: Data Model
    menu:
    - title: Creating a data model means creating your own classes for each type of information
    - title: In its simplest form, the class only contains data members
    - title: For true object orientation, it will also contain methods for performing operations on the object
    - title: Create your own class for a todo/task item
      language: java
      code: |
        public class Task {
          public String title;
          public int priority;
          public Calendar due;

          // Example of a member that calculates a result from existing data member(s)
          public int daysLeft() {
            long ms = due.getTimeInMillis() - GregorianCalendar.getInstance().getTimeInMillis();
            return (int)(ms / 86400);
          }
        }
  - title: Using a data model
    menu:
    - title: Create a new object and set values
      language: java
      code: |
        Task todo = new Task();
        todo.title = "Paint the house";
        todo.priority = 3;
        todo.due = new GregorianCalendar(2013, 7, 1);
    - title: Store multiple objects in an array
      language: java
      code: |
        ArrayList<Task> data = new ArrayList<Task>();
        data.add(todo);
  - title: Object serialization preparation
    menu:
    - title: Dump objects in memory to a file
      description: >
        Useful for persistant storage when the number of objects aren't that many, like a few 100s
    - title: Declare your own class to hold all values for a single data value
    - title: Implement interface Serializable and define a version number
      language: java
      code: |
        public class Task implements Serializable {
          private static final long serialVersionUID = 1;
          // etc ...
        }
  - title: Object serialization to/from binary files
    menu:
    - title: Wrap streams in ObjectOutputStream and ObjectInputStream
    - title: Write an ArrayList with objects of custom class
      language: java
      code: |
        FileOutputStream file = openFileOutput("data.bin", Context.MODE_PRIVATE);
        ObjectOutputStream output = new ObjectOutputStream(file);
        output.writeObject(data);
        output.close();
    - title: Read an ArrayList with objects of custom class
      language: java
      code: |
        FileOutputStream file = openFileOutput("data.bin", Context.MODE_PRIVATE);
        ObjectInputStream output = new ObjectInputStream(file);
        data = (ArrayList<Task>)output.readObject();
        output.close();
  - title: AlertDialog
    menu:
    - title: Show a simple message dialog on screen with Ok and Cancel buttons
      language: java
      code: |
        AlertDialog.Builder dlg = new AlertDialog.Builder(this);
        dlg.setTitle("Confirm deletetion");
        dlg.setMessage("Are you sure you want to delete this?");
        dlg.setNegativeButton(android.R.string.cancel, null);
        dlg.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
          void onClick(DialogInterface iDlg, int which) {
            performDeleteAction();
          }
        });
        dlg.show();
  - title: AlertDialog with input field
    menu:
    - title: Create any custom view in Java and set it as the contents of the AlertDialog
      language: java
      code: |
        AlertDialog.Builder dlg = new AlertDialog.Builder(this);
        final EditText content = new EditText(this);
        dlg.setTitle("Confirm deletetion");
        dlg.setView(content);
        dlg.setNegativeButton(android.R.string.cancel, null);
        dlg.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
          void onClick(DialogInterface iDlg, int which) {
            doSomethingWithString(content.getText().toString());
          }
        dlg.show();
  - title: AlertDialog with a full custom layout
    menu:
    - title: Create a custom layout for your Dialog from a layout xml resource file
      language: java
      code: |
        AlertDialog.Builder dlg = new AlertDialog.Builder(this);
        View layout = getLayoutInflater().inflate(R.layout.person_form);
        final EditText firstname = (EditText)layout.findViewById(R.id.firstname);
        final EditText lastname = (EditText)layout.findViewById(R.id.lastname);
        dlg.setTitle("Tell me your name");
        dlg.setView(layout);
        dlg.setNegativeButton(android.R.string.cancel, null);
        dlg.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
          void onClick(DialogInterface iDlg, int which) {
            savePerson(firstname.getText().toString(), lastname.getText().toString());
          }
        dlg.show();
  - title: More information
    menu:
    - title: Android SDK Guides
      menu:
      - title: Using Shared Preferences
        description: >
          http://developer.android.com/guide/topics/data/data-storage.html#pref
    - title: Tutorials on ListView
      menu:
      - title: http://www.vogella.com/articles/AndroidListView/article.html
      - title: http://www.survivingwithandroid.com/2012/09/listviewpart-1.html

- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment, mandatory
    description: >
      The assignment is mandatory for a passing grade in the course.
    menu:
    - title: Store in SharedPreferences
      description: >
        Add persistant storage to previous assignments Summarizer and Conversion using SharedPreferences.
        You must perform both of the following tasks to complete the assignment.
      menu:
      - title: >
          Add persistant storage to the previous mandatory assignment from chapter 1 called Summarizer.
          Use the SharedPreferences API on Android to store the current total in the application, and
          read it back when the application starts.
      - title: >
          Add persistant storage to the previous mandatory assignment from chapter 3 called Conversion.
          Use the SharedPreferences API to store the current value of the SeekBar, and read it back when
          the application starts (and set the position of the SeekBar accordingly).
  - title: Assignment, optional
    description: >
      Perform this optional assignment to get one (1) extra credit.
    menu:
    - title: Prices
      description: >
        Create an application that stores products and prices in a list.
      menu:
      - title: >
          Create a layout with a ListView, two EditText elements and a Button. The two EditText elements
          shall be used to specify a product name and a product price. The Button shall be used to add
          new products to the list.
      - title: >
          Organize the elements in any way you like and feel free to add TextViews to show a label
          for the EditText elements if you like. Style them and use any kind of nested
          LinearLayouts in order to show them nicely in the user interface. The ListView should be
          set to extend to whatever height remains in the application after the other elements
          have been layed out.
      - title: >
          Use a class capable of storing a "name" and a "price" for the products in the application.
          Preferably use an object of type HashMap<String, String> and store the price as a string too.
          Create a class member of type ArrayList<HashMap<String, String>> to store all added products.
      - title: >
          When the user presses the Button, a new product object should be created and have its name
          and price set from the EditText elements. Add the new object to the storage object that
          you created in the previous step.
      - title: >
          Make sure that everything in the ArrayList (all products) is persistantly stored using
          object serialization. Everything a product is added, you should save all objects to disk.
          And when the application starts, you should read all objects from disk so that they are
          displayed when the application appears on screen.
      - title: >
          Use a SimpleAdapter for the ListView to display the products. You shall use a custom layout xml
          resource that you define which contains a place for both the name of the product and the price
          of the product. The price should be right-aligned and placed to the right of the name. The
          exact layout and styling is not important. Make sure that whenever a new product is added,
          the SimpleAdapter is notified so that it appears on screen.
      - title: >
          Note that your app does NOT have to support editing or deleting of products. Just adding and
          displaying the products is enough to complete the assignment.

#- title: ListApp Example
#  description: >
#    Keep a list of categorized items. Categories can be added, as can items within those categories so the
#    data could be almost anything but it is somewhat streamlined as a todo-list. Demonstrates the ListView
#    visual element and persisting multiple data values in storage.

