title: Network
description: >
  Communicate over the net. Learn how to send http requests asynchronously so that they don't block the
  user interface.
menu:
- title: Lecture Presentation
  heading: 5. Network
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Goals
    menu:
    - Perform a network request fetching data over http
    - Why and how to perform asynchronous operations in Java
    - Using public web APIs and interpret data in JSON format
  - title: Threading
    menu:
    - title: General term for running multiple code blocks at the same time
      description: >
        Or at least switching between them fast enough for humans not to see the difference
    - title: Multithreaded code
      description: >
        Must be intelligent enough to realize that the same code block can run at the same time
        in multiple instances
    - title: User interface thread
      description: >
        In Android, as in most operating systems, all user interface code runs in a single thread
        and must do so
  - title: Dangers of slow code
    menu:
    - title: Code running in the user interface thread should always finish as soon as possible
    - title: Any operation that could take a while to complete should be done in a separate thread
    - title: A while might be a second or even less
    - title: Android will warn user about application might be dead
      menu:
      - title: If an activity event handler takes more than 5 seconds
      - title: If a service handler takes more than 10 seconds
  - title: Difficulties with running code in a separate thread
    menu:
    - title: Access to any shared data must be serialized
      description: >
        Can often be avoided by using intelligent constructs in the Android platform
    - title: Views are not allowed to be accessed in any way, can't call any View methods
      description: >
        Any user interface updating must be specified to run on the user interface thread
    - title: Activity might die for any reason, like memory low or user switching to other app
      description: >
        Code in separate thread should not hang around after its associated Activity has died
  - title: AsyncTask class
    menu:
    - title: Handles three arguments
      menu:
      - title: Argument should specify what to do
      - title: Argument can optionally specify how far the operation has come (progress bars)
      - title: Argument should define the outcome and be used to update the user interface
    - title: Handles three steps
      menu:
      - title: onPreExecute
        description: >
          Often not used since most user interface updating before the operation starts can just
          as easily be done before running the AsyncTask. Is run on main thread.
      - title: doBackground
        description: >
          This is where the long running code can be performed. Is run on a separate thread. Can't
          access anything in the user interface.
      - title: onPostExecute
        description: >
          Called with the returned value from doBackground. Is run on the main thread so the user
          interface can safely be updated here.
  - title: Example
    menu:
    - title: AsyncTask
      language: java
      code: |
        AsyncTask task = new AsyncTask<String, Void, String>() {
          @Override
          String doBackground(String... params) {
            // params[0] is the first argument to execute
            return "";
          }
          @Override
          void onPostExecute(String result) {
            // result is whatever is returned from doBackground
          }
        };
        task.execute("Sweden");
  - title: Network requests
    menu:
    - title: Android has two libraries for doing network requests
    - title: org.apache.http
      menu:
      - title: Open source library not part of core Java
      - title: Included in all Android platform versions
      - title: Was the recommended way before Android version 3.0
      - title: Classes like DefaultHttpClient, HttpGet, HttpPost, HttpResponse
    - title: java.net
      menu:
      - title: Included in all Java platforms, including all Android platform versions
      - title: Is now the recommended way from Android version 3.0 and going forward
      - title: Classes like URL, URLConnection, HttpURLConnection
    - title: Basic principles are the same, but the classes and methods are quite different
    - title: We'll focus on java.net in this course
  - title: Network permission
    menu:
    - title: An application must request network permission
    - title: AndroidManifest.xml
      language: xml
      code: |
        <uses-permission android:name="android.permission.INTERNET" />
  - title: Preparing a network request
    menu:
    - title: We're assuming all network requests will use http
    - title: Setup the address
      language: java
      code: |
        URL address = new URL("http://www.cnn.com");
        URLConnection conn = address.openConnection();
    - title: If you need to set http specific information
      language: java
      code: |
        URL address = new URL("http://www.cnn.com");
        HttpURLConnection conn = (HttpURLConnection)address.openConnection();
        conn.setRequestProperty("User-Agent", "Mozilla/5.0");
    - title: Note that the server is not contacted until a method that requires the response is called by you
  - title: Reading the response from the server
    menu:
    - title: We need to find the correct encoding for non-us letters
      language: java
      code: |
        String encoding = conn.getContentEncoding();
        if (encoding==null)
          encoding = "utf-8";
    - title: Use a BufferedReader to read line-by-line into a StringBuffer
      language: java
      code: |
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(),
          Charset.forName(encoding)));
        String line;
        StringBuffer all = new StringBuffer();
        while ((line = in.readLine())!=null) {
            all.append(line);
        }
        in.close();
        String html = all.toString();
  - title: Interpret html using Java string handling
    menu:
    - title: Find a string within a string
      language: java
      code: |
        int find = html.indexOf("id=\"main\"");
    - title: Find the next occurence of a string within a string
      language: java
      code: |
        int find = html.indexOf("<td");
        int secondFind = html.indexOf("<td", find);
        int thirdFind = html.indexOf("<td", secondFind);
    - title: Extract part of a string
      language: java
      code: |
        int find = html.indexOf("<td");
        int findStart = html.indexOf(">", find);
        int findEnd = html.indexOf("</td>", findStart);
        String part = html.substring(findStart+1, findEnd);
  - title: Interpret html using regular expressions in Java
    menu:
    - title: Regular expressions are a large topic in itself for searching in text
    - title: Match contents of an element with specific id
      language: java
      code: |
        Pattern exp = Pattern.compile("<td.+?id=\"headline\".+?>(.*?)</td>");
        Matcher match = exp.matcher(html);
        if (match.find()) {
          String part = match.group(1);
        }
    - title: Explained
      menu:
      - title: . means any character
      - title: + means one or more occurences of previous character
      - title: "* means zero, one or more occurences of previous character"
      - title: "? after * or + means to stop matching as soon as possible"
      - title: ( and ) means to match a group that we can extract later
      - title: All other characters are literal characters matched to the html source
  - title: Interpret JSON
    menu:
    - title: Many public web APIs return JSON formatted data
    - title: Android platform includes org.json library for working with JSON
    - title: Interpret a JSON string and extract arrays, objects and properties
      language: java
      code: |
        // Assume json string contains:
        // { title: "Name", items: [ 1, 2, 3 ] }
        JSONObject obj = new JSONObject(json);
        String title = obj.getString("title");
        JSONArray items = obj.getJSONArray("items");
        int secondValue = items.getInt(1);
  - title: Binary data from a network request
    menu:
    - title: Handle downloaded binary data
      description: >
        If the response from the server is binary, like an image or an mp3 file, you probably want to
        store it on the local file system.
    - title: Most code similar to fetching html over the network
      menu:
      - title: Get a suitable directory on the local file system where to store the file
      - title: Open a file in that directory and write to it while reading the network response
    - title: Example
      language: java
      code: |
        File outputFile = new File(getExternalCacheDir().getAbsolutePath() + "/myfile.jpg");
        URL url = new URL("http://anysite.com/images/test.jpg");
        URLConnection conn = url.openConnection();
        byte[] buffer = new byte[4096];
        int readCount;
        InputStream input = conn.getInputStream();
        FileOutputStream output = new FileOutputStream(outputFile);
        while ((readCount = input.read(buffer))>=0) {
          output.write(buffer, 0, readCount);
        }
        input.close();
        output.close();
  - title: Web APIs
    menu:
    - title: APIs
      description: >
        A collection of methods to perform actions and/or retrieve data in a structured manor suitable
        for programmed applications
    - title: Web APIs
      description: >
        An API that is available to call over http (and/or https)
    - title: Public Web APIs
      description: >
        Not a common title perhaps, but my way of entitling a web API that can be called without any
        registration, keys, authentication or similar
        a public API.
    - title: Find a Web API
      menu:
      - title: http://www.programmableweb.com/
      - title: http://www.mashup.se/ (mostly in Swedish)
  - title: Web/Screen scraping
    menu:
    - title: When there is no API available, or for some other reason it is not usable
    - title: Read the html from the web site as any web site visitor using a browser
    - title: Identify, collect and extract the relevant information
    - title: Advantages
      menu:
      - title: Very hard to block access (even though some try hard with encrypted/convoluted JavaScript etc)
      - title: Not dependant on the web application having an API
    - title: Disadvantages
      menu:
      - title: Extremely sensitive to changes in the html
      - title: Will need to update code when the html is changed by the web site publishers
    - title: The Semantic Web
      description: >
        A movement where web sites that does not have an API, still tries their best to tag and enclose the
        html in such a manor that it is easy to identify, collect and extract relevant information
  - title: Some API examples
    menu:
    - title: Twitter
      menu:
      - title: Documented at https://dev.twitter.com/
      - title: Many operations require an application key and an authenticated user, but search is public
      - title: \http://search.twitter.com/search.json?q=androiddev&rpp=20
    - title: Hacker News
      menu:
      - title: News for programmers - http://news.ycombinator.com
      - title: \http://api.thriftdb.com/api.hnsearch.com/items/_search?q=android&filter[fields][type]=submission&sortby=create_ts%20desc&limit=20
    - title: Google Translate
      menu:
      - title: Not documented nor officially available any more
      - title: But web site at http://translate.google.com still uses APIs that can easily be reused by any one
      - title: Beware that this might change in a second!
      - title: \http://translate.google.com/translate_a/t?client=t&text=snow&hl=en&sl=en&tl=fr&ie=UTF-8&oe=UTF-8&multires=1&otf=2&ssel=4&tsel=0&sc=1
      - title: \http://translate.google.com/translate_tts?ie=UTF-8&q=snow&tl=en&total=1&idx=0&textlen=4&prev=input
  - title: More information
    menu:
    - title: Book references
      menu:
      - title: Android Programming Unleashed, Chapter 13 Creating and Consuming Services, Accessing data from the Internet
      - title: Android Programming Unleashed, Chapter 13 Creating and Consuming Services, Using the AsyncTask Class
      - title: Android Cookbook, Chapter 13.2 Using a RESTful Web Service

- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment, mandatory
    description: >
      The assignment is mandatory for a passing grade in the course.
    menu:
    - title: Headline App
      description: >
        Create an application that fetches the front page of your favorite news site on the internet,
        extracts the top headline and displays it in the application.
      menu:
      - title: >
          Create a user interface with a TextView and a Button.
      - title: >
          When the user presses the Button, fetch the front page of a news site on the internet using
          the AsyncTask class.
      - title: >
          Use Java string handling to find and extract the top headline from the html returned in the
          previous step. It's not that important exactly what you extract. If you have trouble
          extracting the exact top headline, anything extracted from the page is fine as long as it has
          some meaning and can be displayed in a TextView.
      - title: >
          Display the extracted headline in a TextView.
  - title: Assignment, optional
    description: >
      Perform this optional assignment to get one (1) extra credit.
    menu:
    - title: Twitter Search App
      description: >
        Create an application that reads data in JSON format over the network, stores it in a SQLite
        database and displays it in a ListView. You are free to choose any kind of data, but a simple
        suggestion is to use the Twitter Search API. A network request that returns JSON can look like
        http://search.twitter.com/search.json?q=androiddev
      menu:
      - title: >
          Store data for the application in a single table in a SQLite database.
      - title: >
          Display the data from that table in a ListView using a CursorAdapter. You are free to use
          any view to display the individual items in the table. You don't have to use a custom layout
          view that you define yourself. You can use the simple built-in layout 
          android.R.layout.simple_list_item_1 if you like.
      - title: >
          Fetch data from a public web site on the internet using a documented API returning JSON data.
          Perform all network requests in a separate thread using the AsyncTask class.
      - title: >
          Create a button in the user interface to manually start a request and download new data. Note
          that you should automatically refresh the ListView once new data has been retrieved and stored
          in the SQLite database.
      - title: >
          Store the retrieved data in a SQLite database. When downloading data, make sure you are not
          adding the same data again. You need to store a unique identifier in the database and perform
          a SELECT statement before adding new data and check if that unique identifier might already
          be present in the database. Only after getting an empty response from such a SELECT/query call,
          the new data should be inserted into the database.
      - title: >
          Display the data from the SQLite database using a ListView and CursorAdapter. You shall also use
          a custom layout defined in your own xml resource file when displaying the items. It is enough
          to display a single string in it if you like. The important part is that you use a custom layout
          and a CursorAdapter where you map the column (or multiple columns) to elements with id in the
          custom layout.

