title: Events
type: deck
description: >
  Slides about how to respond to events in Android apps.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Agenda
  menu:
  - title: Handle events fired by views
  - title: Handle Activity events
- title: Events
  menu:
  - title: Your code is almost always run as the result of an event
    menu:
    - title: User interactions on screen
    - title: Activity and operating system events
    - title: Except background threads
    - title: And Broadcasts
  - title: Events you already know
    menu:
    - title: Activity event onCreate
    - title: Button click event
    - title: Returning from a second Activity
- title: More event source examples
  menu:
  - title: Activity events
    menu:
    - title: Back button was pressed
    - title: A menu item was chosen by the user
    - title: A second Activity finishes and returns the result
  - title: View events
    menu:
    - title: An item was selected in a Spinner
    - title: A button was clicked for a longer period of time
  - title: System events
    menu:
    - title: A SMS text message has been received
    - title: Battery level is low
    - title: User has chosen to share data with your app
- title: Respond to an event
  menu:
  - title: Event handlers
    menu:
    - title: A method you provide that is called by system
    - title: Return quickly since user interface will be blocked
  - title: Override a method in a base class
    menu:
    - title: Your class "extends" a base class and overrides one or more methods
  - title: Implement an interface
    menu:
    - title: Your class "implements" an interface where methods are defined
- title: Override a method in a base class
  menu:
  - title: Must have the exact same definition
    menu:
    - title: name, return type and arguments
    - title: Use @Override attribute for Java compiler check
  - title: You are replacing the base method with your own method
    menu:
    - title: Might need or want to call base method too
- title: Example of overriding a method
  menu:
  - title: onBackPressed is fired when back button is pressed
    language: java
    code: |
      public class MyActivity extends Activity {
        @Override
        public void onBackPressed() {
          super.onBackPressed();
        }
      }
- title: Activity lifetime events
  menu:
  - title: onCreate
    description: >
      When Activity is launched from a fresh object in memory
  - title: onStart
    description: >
      When user navigates back from other Activity
  - title: onResume
    description: >
      When focus is regained after showing a Dialog or similar
  - title: onPause
    description: >
      When about to lose focus from showing a Dialog or similar
  - title: onStop
    description: >
      When about to show some other Activity
  - title: onDestroy
    description: >
      When object is about to be destroyed from memory
- title: Other Activity events
  menu:
  - title: onBackPressed
    description: >
      When user pressed back button in current Activity
  - title: onActivityResult
    description: >
      When returning to this Activity after startForResult
  - title: onCreateOptionsMenu
    description: >
      When about to show ActionBar menu
  - title: onOptionsItemSelected
    description: >
      When user has chosen a command from ActionBar menu
- title: Implement an interface
  menu:
  - title: Places to put the implementation
    menu:
    - title: Implement in existing Java class like your Activity
    - title: Implement in an anonymous class on-the-fly
    - title: Implement in a new class
  - title: All methods in the interface must be implemented
    menu:
    - title: Many interfaces only have one method
    - title: Leave unused methods empty (will need return value)
  - title: Will not be called automatically just because it exists
    menu:
    - title: Call a set-method on the object that fires the event
    - title: set-method named after interface
- title: Implement in anonymous class
  menu:
  - title: Tell Button to call method when event happens
    language: java
    code: |
      Button btn = (Button) findViewById(R.id.my_button);
      final String newText = "Ouch";
      btn.setOnClickListener(new OnClickListener() {
        @Override
        public void onClick(View view) {
          ((Button)view).setText(newText);
          MediaPlayer p = MediaPlayer.create(MainActivity.class R.raw.click);          
        }
      });
  - title: Note that
    menu:
    - title: Accessing local variables outside of method requires final
    - title: Accessing outer "this" requires ClassName.this
- title: General View event interfaces
  menu:
  - title: OnClickListener
    menu:
    - title: When user has clicked/touched+released inside the view
    - title: void onClick(View src)
  - title: OnTouchListener
    menu:
    - title: When user touches, moves and releases inside the view
    - title: boolean onTouch(View src, MotionEvent event)
  - title: OnLongClickListener
    menu:
    - title: When user has pressed and hold for an amount of time inside the view
    - title: boolean onLongClick(View src)
- title: Spinner event
  menu:
  - title: OnItemSelectedListener
    menu:
    - title: When user has chosen an option from the drop down list
      language: java
      code: |
        void onItemSelected(AdapterView<?> src, View selectedView, 
          int selectedPosition, long selectedId)
    - title: When currently selected optionis unselected
      language: java
      code: |
        void onNothingSelected(AdapterView<?> src)
- title: Introducing SeekBar
  menu:
  - title: View with a knob moved between endpoints to set a value
    description: >
      An extension of the Progress view for showing long running operation status
  - title: android:max
    description: >
      Maximum value when knob moved to right-most position
  - title: android:progress
    description: >
      Start and current value between endpoints
  - title: Lowest/left-most is always zero
- title: SeekBar events
  menu:
  - title: OnSeekBarChangeListener
    language: java
    code: |
      void onStartTrackingTouch(SeekBar source)
      void onProgressChanged(SeekBar source, int pos, boolean byUser)
      void onStopTrackingTouch(SeekBar source)
  - title: onStartTrackingTouch
    description: >
      When the user first touches the knob, before moving it
  - title: onProgressChanged
    description: >
      When value is changed on each movement of knob
  - title: onStopTrackingTouch
    description: >
      When user releases the knob after movement
  - title: All methods must be defined, but can be empty
- title: Touch events
  menu:
  - title: When user interacts with screen
    menu:
    - title: For detailed control over screen interaction
  - title: MotionEvent object
    menu:
    - title: getX() has x position of event
    - title: getY() has y position of event
    - title: getAction() has reason for event
      menu:
      - title: ACTION_DOWN when user first touches the screen
      - title: ACTION_MOVE when user moves while touching
      - title: ACTION_UP when user releases touch
