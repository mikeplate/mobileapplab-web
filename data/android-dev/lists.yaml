title: Lists Presentation
type: deck
description: >
  Slides about efficient pattern for displaying items of data in a list.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Agenda
  menu:
  - title: ListViews and adapters
  - title: Customized ListView items
- title: Lists on screen
  menu:
  - title: The problem
    menu:
    - title: Memory intensive to create many views on screen
    - title: In a list, most views are not even displayed on screen
    - title: Dynamically creating a view for each data item not good
  - title: The solution
    menu:
    - title: Virtual list
    - title: Only create views for the currently visible data items
    - title: Reuse view objects for different data items when scrolling
    - title: Both Android and iOS have platform solutions to this
- title: ListView
  menu:
  - title: Define ListView element in xml layout
    menu:
    - title: Define xml layout for each item inside list
  - title: Store data items in memory
    menu:
    - title: Or in a SQLite database
  - title: Connect the two with an adapter
    menu:
    - title: Abstraction of multiple data items
    - title: ListView handles different types of data the same way
- title: ListView
  menu:
  - title: Just like any other view in the layout xml file
    menu:
    - title: Often expanded vertically to fill out remaining area
    - title: No items can be specified in xml
  - title: Add ListView to layout
    language: xml
    code: |
      <ListView android:id="@+id/list"
        android:layout_width="match_parent" 
        android:layout_height="match_parent" />
- title: ArrayList
  menu:
  - title: Manage an ArrayList of all data items
    menu:
    - title: Using singular values like string for each item
      language: java
      code: |
        ArrayList<String> simpleData = new ArrayList<String>();
        simpleData.add("Some name here");
    - title: Using complex values like objects of your class
      language: java
      code: |
        ArrayList<Item> complexData = new ArrayList<Item>();
        Item item = new Item();
        item.name = "Some name here";
        complexData.add(item);
- title: ArrayAdapter
  menu:
  - title: Specify
    menu:
    - title: Context - this when in Activity
    - title: Data source - the ArrayList
    - title: Xml layout to display each item in data source
    - title: Optional identifier(s) where to output data value
  - title: Create an ArrayAdapter with the type of item
    language: java
    code: |
      ArrayAdapter<String> simpleAdapter = new ArrayAdapter<String>(this,
        android.R.layout.simple_list_item_1, simpleData);

      ArrayAdapter<Item> complexAdapter = new ArrayAdapter<Item>(this,
        R.layout.my_own_item_layout, complexData);
- title: Connecting the adapter to the ListView
  menu:
  - title: Get a reference to it in Java code and set its Adapter
    language: java
    code: |
      ListView list = (ListView) findViewById(R.id.list);
      list.setAdapter(adapter);
- title: Built-in layouts for list adapters
  menu:
  - title: A single TextView
    menu:
    - title: android.R.layout.simple_list_item_1
    - title: Each item's toString is used to get text
  - title: Two TextViews, title and subtitle
    menu:
    - title: android.R.layout.simple_list_item_2
    - title: Requires items and maps to define text to show in each
- title: Custom layout for list adapters
  menu:
  - title: You provide the layout xml for each item
  - title: You control the item view generation
  - title: When you need more control than showing a single String
  - title: Create your own class derived from ArrayAdapter
  - title: Override getView method to build the user interface for each item
    description: >
      Use a pattern for dealing with reusable item views and the whole virtualization that the
      ListView and Adapter provides
  - title: Access and modify whatever you like in each item
- title: Custom item XML layout
  menu:
  - title: Example (not all attributes shown for clarity)
    language: xml
    code: |
      <LinearLayout>
        <ImageView android:id="@+id/icon" />
        <TextView android:id="@+id/title" />
        <TextView android:id="@+id/hours" />
      </LinearLayout>
- title: Custom Adapter class
  menu:
  - title: Inherit from an existing Adapter
    menu:
    - title: Define a constructor
    - title: Override the getView method that creates each layout item for the list
  - title: Your custom class
    language: java
    code: |
      class MyAdapter extends ArrayAdapter<String> {
          public MyAdapter(Context context, ArrayList<String> data) {
              super(context, R.layout.item, data);
          }

          @Override
          public View getView(int position, View convertView, ViewGroup parent) {
          }
      }
- title: Custom layout items
  menu:
  - title: Inflate the item layout
    language: java
    code: |
      @Override
      public View getView(int position, View view, ViewGroup parent) {
        if (view == null) {
          view = MainActivity.this.getLayoutInflater().inflate(R.layout.item, null);
        }
        String item = getItem(position);
        TextView text = (TextView) view.findViewById(R.id.text);
        text.setText(item);
        return view;
      }
- title: ListView events
  menu:
  - title: Events fired for the list item as a whole
    menu:
    - title: Create and specify in onCreate when activity starts
  - title: OnItemClickListener
    description: >
      When user touches on an item in the list
  - title: OnItemLongClickListener
    description: >
      When user touches and holds on for a period of time, on an item in the list
  - title: Events fired from specific views inside the list item
    menu:
    - title: Create and specify inside of getView
- title: ListView event handler
  menu:
  - title: Implement event handler
    language: java
    code: |
      ListView list = (ListView) findViewById(R.id.list);
      list.setOnItemClickListener(new OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        }
      });
  - title: Arguments
    menu:
    - title: AdapterView<?> is the adapter for the ListView
    - title: View is the visual element container for the particular item that was clicked
    - title: int is the position of the item that was clicked (first is zero)
    - title: long is the identifier of a SQLite database table row, if a CursorAdapter was used
- title: Button clicks in items
  menu:
  - title: Button with onClick in item layout
    menu:
    - title: Single onClick called in Activity for all items
    - title: Use View argument to find out which item
  - title: From an item view to a position
    language: java
    code: |
      ListView _list;
      ArrayAdapter<String> _adapter;
      public void onClick(View btn) {
        int position = _list.getPositionForView();
        String value = _adapter.getItem(position);
      }
- title: Updating the data
  menu:
  - title: The data source may change as much as needed
  - title: Tell adapter about change and update the list
    menu:
    - title: Call notifyDataSetChanged on the adapter
    - title: Store the adapter as a class member, or retrieve it from the list
  - title: Example
    language: java
    code: |
      ListView list = (ListView) findViewById(R.id.list);
      ArrayAdapter<String> adapter = (ArrayAdapter<String>) list.getAdapter();
      adapter.notifyDataSetChanged();
- title: Extra features
  menu:
  - title: Swipe items to the left or right
    menu:
    - title: https://github.com/romannurik/Android-SwipeToDismiss/tree/master/src/com/example/android/swipedismiss

