title: Views Presentation
heading: Views
type: deck
description: >
  Slides about the views you can use build the interface.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Agenda
  menu:
  - title: Use layouts to organize the placement of views
  - title: Most important view controls
- title: Layouts
  menu:
  - title: The layout element is responsible for laying out its child elements
    description: >
      Determines width and height of each child element, and how to position them in relation to
      one another. Different layout classes uses different attributes and rules when performing 
      this operation.
  - title: Layout classes are derived from the common base class ViewGroup
  - title: Layout rules are specified as attributes on child elements with prefix "layout_"
- title: Layouts in this course
  menu:
  - title: RelativeLayout
    menu:
    - title: Default layout in project template
    - title: Child elements are layed out relative to the layout itself, or other child elements
    - title: Not very good for proportional layouts
  - title: LinearLayout
    menu:
    - title: Easy to use, fewer rules and attributes to learn
    - title: Very good at handling percentages for laying out children proportionally
    - title: Used in course for simplicity reasons
- title: LinearLayout attributes
  menu:
  - title: android:orientation
    menu:
    - title: horizontal = views are displayed next to each other
    - title: vertical = views are displayed below each other
  - title: Nesting
    menu:
    - title: Create LinearLayout inside of a LinearLayout
    - title: Switch between horizontal/vertical orientation
    - title: Not recommended for performance reasons
- title: LinearLayout attributes on children
  menu:
  - title: android:layout_width
    menu:
    - title: wrap_content = content of view determines size
    - title: match_parent = extend size to size of parent
  - title: android:layout_height
    menu:
    - title: Works the same as layout_width but for height/vertical size
  - title: android:layout_gravity
    menu:
    - title: Alignment of child inside parent
    - title: Only when wrap_content is used
  - title: android:layout_margin
    menu:
    - title: Added empty space between parent and child edge
- title: Proportional sizes
  menu:
  - title: Purpose
    menu:
    - title: Extend views proportionally to have a collection of views fill out a space
  - title: android:layout_width="0px"
    menu:
    - title: Specify zero width or height to start with equal size among children
  - title: android:layout_weight
    menu:
    - title: Specify a number that determines how much child will expand in relation to other children layout_weight:s
    - title: Expand all equally by using the same number
- title: View controls
  menu:
  - title: Specified as xml elements in layout xml file
  - title: TextView
    menu:
    - title: Static text / labels
  - title: Button
    menu:
    - title: Clickable button, optional text/icon
  - title: EditText
    menu:
    - title: Input field for text, numbers etc
  - title: CheckBox
    menu:
    - title: Check mark that can be on or off
  - title: Spinner
    menu:
    - title: Drop down list of options
- title: Accessing views from Java
  menu:
  - title: Create a unique identifier for the view in xml, will be generated as a Java constant in R.id.
    language: xml
    code: <TextView android:id="@+id/myname" />
  - title: Declare class member with same class as xml element
    language: java
    code: TextView _myname;
  - title: Assign class member in onCreate after setContentView
    language: java
    code: _myname = (TextView)findViewById(R.id.myname);
- title: Modifying views from Java
  menu:
  - title: Attribute in xml is only the initial value
  - title: Attributes can be modified from Java
    menu:
    - title: Most attributes like "text" have a corresponding setText and getText
    - title: Some attributes requires more code than is needed in xml
  - title: Change the text
    language: java
    code: _myname.setText("Mike");
- title: TextView
  menu:
  - title: android:text
    menu:
    - title: The text that is displayed in the view
  - title: android:gravity
    menu:
    - title: Specify how to align the text, if view larger than text
- title: Button
  menu:
  - title: android:text
    menu:
    - title: The text that is displayed in the button
  - title: android:onClick
    menu:
    - title: Name of class member to call when button is clicked
- title: EditText
  menu:
  - title: android:text
    menu:
    - title: Optional text to begin with
  - title: android:inputType
    menu:
    - title: Defines what type of content can be typed in the field
    - title: text, textMultiLine, textPassword, number, phone
    - title: textAutoCorrect, textNoSuggestions
  - title: Read/write current value in Java
    language: java
    code: |
      String value = _textView.getText().toString();
      _textView.setText(value);
- title: CheckBox
  menu:
  - title: android:text
    menu:
    - title: Text to display to the right of the check box
  - title: android:checked
    menu:
    - title: The default value of the field, true or false
  - title: Read/write current value in Java
    language: java
    code: |
      if (_checkBox.isChecked())
        _checkBox.setChecked(false);
  - title: CheckedTextView
    description: >
      Can be used instead of CheckBox if you want the check mark to the right of the text
- title: Spinner
  menu:
  - title: android:entries="@array/countries"
    description: >
      An array xml resource identifier. The xml resource file will contain all strings in the list.
  - title: /res/values/array.xml
    language: xml
    code: |
      <resources>
        <string-array name="countries">
          <item>Sweden</item>
  - title: android:prompt
    description: >
      Title of dialog popup when such is shown for choosing one of the options
  - title: android:spinnerMode
    description: >
      Force popup dialog on newer versions using value "dialog"
- title: Spinner from Java
  menu:
  - title: Get the position of the selected item
    language: java
    code: |
      int selected = _spinner.getSelectedItemPosition();
  - title: Set which item is selected
    language: java
    code: |
      int selected = 0;
      _spinner.setSelection(selected);
- title: View
  menu:
  - title: Rectangular box with specfied color
  - title: Does not have any content, but will paint a background
  - title: Can also be useful when padding/extending empty areas in a user interface
  - title: Or to simluate lines/dividers in the user interface
  - title: Create custom class derived from View for pixel level control
- title: Many more views
  menu:
  - title: RadioButton
    menu:
    - title: Two or more options shown next to each other
  - title: ToggleButton
    menu:
    - title: A single button with a colored bar for being "on"
  - title: Switch
    menu:
    - title: A button with two different texts that switches on each click
  - title: ImageView
    menu:
    - title: Show an image
    - title: Will be described in Resources chapter
- title: Adding views from Java
  menu:
  - title: Create a new object of corresponding class
    language: java
    code: TextView myname = new TextView(this);
  - title: Add it to a layout container
    language: java
    code: _layout.addView(myname);
  - title: Setting layout attributes require some extra code
    language: java
    code: |
      LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT, 
        LinearLayout.LayoutParams.WRAP_CONTENT);
      myname.setLayoutParams(p);
