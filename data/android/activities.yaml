title: Lecture Presentation
heading: 1. Activities
type: deck
shortname: lecture
description: >
  Slides displayed in the browser. Choose "print" link for a printer-friendly
  page with all slides after one another.
menu:
- title: Goals
  menu:
  - title: Understand the basic building blocks of an Android apps
  - title: Create a simple user interface with text and buttons
  - title: Access and change the text of objects in the user interface
  - title: Start other apps (Activities) from your app
  - title: Classes and methods introduced in this chapter
    description: >
      Activity, onCreate, TextView, Button, onClick, Intent, startActivity, Toast
- title: What is an Activity?
  menu:
  - title: Main building block of an app
  - title: Represents a screen that is presented to the user
  - title: Has a life cycle with events when it gets created, hidden, revealed, closed etc
  - title: Compare it to an HTML page
    description: >
      Without an HTML page you don't have a web site. One page can link to another with the same site or
      a page on a unrelated web site. The same is true for Activities.
- title: Where is the Activity?
  menu:
  - title: Specified as an XML element in AndroidManifest.xml
  - title: Coded as an Activity-derived Java class in MainActivity.java
  - title: onCreate loads the layout XML and displays it
    language: java
    code: >
      @Override
      protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
  - title: Android creates icon for it when installed from intent filter in AndroidManifest.xml
    language: xml
    code: >
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
  - title: Android starts the specified Activity in AndroidManifest.xml when launching the app
    language: xml
    code: >
      <activity android:name="se.mobileapplab.example.MainActivity"
- title: User interface
  menu:
  - title: Defined in layout XML file(s)
    menu:
    - title: activity_main.xml
    - title: fragment_main.xml
  - title: The Activity loads activity_main and then inserts fragment_main into that layout
    description: >
      We'll leave it at that and explain a little more about Fragments in the next chapter
- title: Your first Activity
  menu:
  - title: Java code in MainActivity.java
  - title: User Interface in fragment_main.xml
  - title: Button click in fragment_main.xml ends up as call to method in MainActivity.java
  - title: Compare to how web pages work
    menu:
    - title: User interface in HTML <=> Layout and View XML in fragment_main.xml
    - title: JavaScript in js-files or inline in web page <=> Java in MainActivity.java
    - title: CSS stylesheets <=> Styles and themes as XML in files inside of res/values
- title: LinearLayout
  menu:
  - title: Recommend to use LinearLayout as root
    language: xml
    code: |
      <LinearLayout android:orientation="vertical"
  - title: android:orientation
    menu:
    - title: horizontal, where all views inside are displayed next to each other
    - title: vertical, where all views inside are displayed below each other
  - title: Views inside of LinearLayout start and end tags
    language: xml
    code: |
      <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
  - title: android:layout_width, android:layout_height
    menu:
    - title: match_parent, means to fill the parent's area regardless of actual size
    - title: wrap_content, means only to take the space that is needed from actual size
  - title: Explained further in next chapter
- title: Views in a layout
  menu:
  - title: TextView
    menu:
    - title: Simple text content
    - title: android:text is the content
  - title: Button
    menu:
    - title: Button that can be pressed
    - title: android:onClick is name of Activity method to call when pressed
    - title: Method can have any valid Java name, but must be void and take View argument
      language: java
      code: |
        public void onButton(View source)
- title: Access to a View from Java code
  menu:
  - title: You often need to change Views after they've been loaded from XML
  - title: Give the View an id in the xml layout file
    language: xml
    code: |
      <TextView android:id="@+id/title"
  - title: Declare an object in your class of same same as View
    language: java
    code: |
      TextView _someAppTitle;
  - title: Set object to refer to the View in onCreate using findViewById
    language: java
      _someAppTitle = (TextView)findViewById(R.id.title);
- title: Use a reference to a View
  menu:
  - title: Change the text of a TextView
    language: java
    code: |
      _someAppTitle.setText("Now my title is different");
  - title: Most attributes in the xml have corresponding set-methods for changing them from Java
    description: >
      However, some are a bit more difficult to set/change (like android:layout_width)

- title: Activity life cycle
  menu:
  - title: Created
  - title: Started
  - title: Paused
  - title: Resumed
  - title: Stopped
  - title: Destroyed

- title: Start other application
  menu:
  - title: Android has something similar to file extension associations
    description: >
      Applications can register to handle different types of "actions". Such a specification is called an
      "Intent" on Android. By using Intents, you don't need to know about which other applications are
      installed on the device but still take advantage of their features from your application.
  - title: Create an Intent object with an Action (and optional specification)
    language: java
    code: |
      Intent dosomething = new Intent(Intent.ACTION_DIAL);
  - title: Launch other application with startActivity
    language: java
    code: |
      startActivity(dosomething);
- title: Phone-related intents
  menu:
  - title: Start the dialer with a prepared phone number
    language: javascript
    code: |
      Intent dial = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:0123456789"));
      startActivity(dial);
  - title: Start the messaging app to a prepared phone number with a text
    language: javascript
    code: |
      Intent sms = new Intent(Intent.ACTION_SENDTO, Uri.parse("sms:0123456789"));
      sms.putExtra("sms_body", "Hi there. How are you?");
      startActivity(sms);
  - title: Call a phone number immediately. Requires the CALL_PHONE permission!
    language: javascript
    code: |
      Intent call = new Intent(Intent.ACTION_CALL, Uri.parse("tel:0123456789"));
      startActivity(call);
- title: Web-related intents
  menu:
  - title: Start the web browser and go to web site
    language: java
    code: |
      Intent browse = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.hj.se"));
      startActivity(browse);
  - title: Use the web browser to search for something
    language: java
    code: |
      Intent search = new Intent(Intent.ACTION_WEB_SEARCH);
      search.putExtra(SearchManager.Query, "android settings intent example");
      startActivity(search);
  - title: Share a text to any registered application (like Facebook)
    language: java
    code: |
      Intent share = new Intent(Intent.ACTION_SEND);
      share.putExtra(Intent.EXTRA_SUBJECT, "Good morning!");
      share.putExtra(Intent.EXTRA_TEXT, "Time to get up. This will be a good day.");
      startActivity(share);

- title: Android Permission system
  menu:
  - title: Applications define permissions that they require in the manifest
    description: >
      Never require more permissions that you actually need
  - title: User will see these permissions before confirming to install application
    description: >
      Permissions are an all-or-nothing option. If the user isn't confident with the requested
      permission(s), the user can only select NOT to install the application at all.
  - title: Defined in root element of AndroidManifest.xml
    language: xml
    code: |
      <uses-permission android:name="android.permission.CALL_PHONE" />
  - title: http://developer.android.com/reference/android/Manifest.permission.html
- title: Toast
  menu:
  - title: Nothing you eat or drink
    description:
      Android's name for a short text message that appears on top of the user interface and is
      automatically removed after a few seconds
  - title: Good feature for notification messages
    description: >
      Can also be used for simpler debugging purposes, like checking a value or ensuring a code
      statement is reached (without using the full debugging capabilities of Eclipse)
  - title: Show a toast message
    language: java
    code: |
      Toast.makeText(this, "Hello, world!", Toast.LENGTH_LONG).show();
- title: More information
  menu:
  - title: Book references
    menu:
    - title: Android Programming Unleashed, Chapter 1 Introduction to Android, Creating the First Android Project
    - title: Android Programming Unleashed, Chapter 2 Basic Widgets, Overview of the Android Project Files
    - title: Android Programming Unleashed, Chapter 2 Basic Widgets, Creating and Starting an Activity
