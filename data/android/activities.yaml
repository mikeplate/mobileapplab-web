title: Activities
description: >
  Overview of the tools and technologies for building native Android applications. Activities and Intents
  as the main engine of showing and starting Android applications.
menu:
- title: Lecture Presentation
  heading: 1. Activities
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Goals
    menu:
    - title: Understand the basic building blocks of an Android application
    - title: Create a simple user interface with text and buttons
    - title: Access and change the text of objects in the user interface
    - title: Start other applications (Activities) from your application
    - title: Classes and methods introduced in this chapter
      description: >
        Activity, onCreate, TextView, Button, onClick, Intent, startActivity, Toast
  - title: What is Android?
    menu:
    - title: Open source
    - title: Linux kernel
    - title: Optimized for mobile devices
    - title: Uses Java for building applications (1.5)
    - title: Can also run native code in C/C++
    - title: Has its own runtime (not standard Java runtime) - Dalvik
    - title: History
      menu:
      - title: Google buys Android in 2005, unveiled in the fall of 2007
      - title: Android versions are named after sweets/pastries in alphabetical order
  - title: Android version history
    menu:
    - title: 1.0 2008 (September)
    - title: 1.5 Cupcake 2009 (April)
    - title: 1.6 Donut 2009 (September)
    - title: 2.1 Eclair 2009 (October)
      description: >
        Live wallpapers. Account Manager.
    - title: 2.2 Froyo 2010 (May)
      description: >
        Store apps on SD card. Cloud to device messaging.
    - title: 2.3 Gingerbread 2010 (December)
      description: >
        Multiple cameras. Gyroscope and more sensors.
    - title: 3.0, 3.1, 3.2 Honeycomb 2011 (February)
      description: >
        Fragments. Action bar. New animation framework. For tablets only.
    - title: 4.0 Ice Cream Sandwich 2011 (October)
      description: >
        GridLayout. Resizable widgets. WiFi Direct.
    - title: 4.1, 4.2 Jelly Bean 2012 (June, November)
      description: >
        Multi-user support. Lock screen widgets. Second display support.
  - title: Create a new project
    menu:
    - title: Choose "File, New, Android Application"
    - title: Application name
      description: >
        The title shown to users when installing, below icon etc. Example: My Test Application
    - title: Project Name
      description: >
        The name of the project folder in Eclipse workspace. Example: MyTest
    - title: Package Name
      description: >
        Unique (reverse) domain name that identifies the application to the platform. Does not have to be
        a registered domain or site. Example: se.mobileapplab.mytest
  - title: Create a new project (2)
    menu:
    - title: Minimum Required SDK
      description: >
        The oldest Android version where the application will install.
    - title: Target SDK
      description: >
        The newest Android version that the developer is aware of and might have optimized for.
    - title: Compile With
      description: >
        Should always be the latest installed Android version to get the most recent tools, compilers etc
        when building the application.
    - title: Theme
      description: >
        Default styles that will be applied to different components in the user interface. Not guaranteed
        on versions older than "Target SDK", since chosen theme might not be available there.
    - title: Use defaults for all other options and dialogs
  - title: Deciding on an Android version
    menu:
    - title: One single application
      menu:
      - title: Can run on many different Android versions
      - title: Can check and adjust itself to take advantage of newer features on newer versions
    - title: Multiple versions of the application
      menu:
      - title: Build separate applications with different "Minimum Required" versions
      - title: Some/much shared code
      - title: Two versions should cover most of the needs for version separation
    - title: If there is a specific feature your application requires in order to function
    - title: If there are features that will enhance your application, but isn't essential
    - title: Statistics of running versions
      description: >
        http://developer.android.com/about/dashboards/index.html
  - title: Files and folders in project
    menu:
    - title: src
      description: >
        Java source files. This is where you will add your code. Organized in subfolders according to
        the different parts of the package name (reverse domain name).
    - title: assets
      description: >
        Optional raw data files that the application might need. Not handled by the platform in any way.
    - title: libs
      description: >
        Extra libraries with code that the application mgith need.
    - title: res
      description: >
        Important resource files in both xml and binary (images) format. These files are handled and
        selected by the platform according to different properties (qualifiers) of the device.
    - title: AndroidManifest.xml
      description: >
        Main configuration of the application. Specifies all activities of the application, some names,
        the icon, permissions and more.
  - title: Important objects in an application
    menu:
    - title: Activity
      description: >
        The basic object of all Android applications. Without an Activity, nothing will be displayed on
        the screen. An application must contain at least one Activity, but can contain more.
    - title: View
      description: >
        The basic visual object when building the user interface. All specific visual components are
        derived from the View. Can be buttons, input fields, formatted text, images etc.
    - title: ViewGroup
      description: >
        A special View that contains other Views layed out on screen according to some rule/specification.
        Usually a ViewGroup-derived layout class is the root of your user interface.
    - title: Intent
      description: >
        Describes an action that should be performed, most often in the form of starting an Activity.
  - title: Not so important objects
    menu:
    - title: Application
      description: >
        The root object of your application. Must always exist, and there will only be one. You can derive your
        own class from the Application class if you want to handle something application specific, but we will
        not need to do that in this course.
    - title: Window
      description: >
        The Window object handles a top level View for an application. The Window contains a View, but can also
        handle a title and some more visuals. You rarely or never need to access the Window of your application.
    - title: Context
      description: >
        Generalization of the resources and other objects that relates to the application. You will use it
        as an argment in many calls, but you don't need to know anything more about it and you can always
        use the Activity (this) for the course's examples.
  - title: Resource files
    menu:
    - title: Configuration/definition files below the "res" folder of your project
      menu:
      - title: Mostly binary files (like jpg) or xml files
      - title: Each subfolder below "res" has a special meaning to the platform
      - title: We'll talk more about resource files in the next chapter
    - title: User interface specification
      menu:
      - title: Stored as xml files below the "layout" subfolder
      - title: We'll edit this file in our first project
    - title: Text translations
      menu:
      - title: Stored as xml files below the "string" subfolder
      - title: We'll get back to these in the next chapter
  - title: Your first Activity
    menu:
    - title: Visual appearence - layout
      menu:
      - title: Defined in res/layout/main.xml
      - title: Specifies elements to show in the user interface
    - title: Java Class where your code/logic resides
      menu:
      - title: Stored in src/se.mobileapplab.demo/MainActivity.java
      - title: Contains code that will be called by the platform when events happen
    - title: Separation of layout/code is quite similar to how ASP.NET separates between an aspx-file and a code-behind file
  - title: Layouts in an Activity
    menu:
    - title: RelativeLayout
      menu:
      - title: This is the default type of layout for new projects
      - title: Every visual element is placed in relation to some other/previous element
      - title: We'll always change this to LinearLayout for the examples in this course
    - title: LinearLayout
      menu:
      - title: A little less powerful and less efficient than the RelativeLayout
      - title: But I think it is easier to use and understand
      - title: All visual elements are either layed out horisontally or vertically
      - title: Nested LinearLayouts can be used for more complex layouts
  - title: LinearLayout basics
    menu:
    - title: Until next chapter, we'll use it like this
    - title: Vertical orientation for elements below each other
      language: xml
      code: |
        <LinearLayout android:orientation="vertical"
    - title: All child elements are full width and height according to contents
      language: xml
      code: |
        <TextView
          android:layout_width="match_parent"
          android:layout_height="wrap_content"
  - title: Views in a layout
    menu:
    - title: TextView
      menu:
      - title: Simple text content
      - title: android:text is the content
    - title: Button
      menu:
      - title: Button that can be pressed
      - title: android:onClick is name of Activity method to call when pressed
      - title: Method can have any valid Java name, but must be void and take View argument
        language: java
        code: |
          public void onButton(View source)
  - title: Methods in an Activity class
    menu:
    - title: Some methods have predefined names which makes them into event handlers
    - title: Event handlers are called by the Android platform during the life cycle of an Activity
    - title: onCreate
      description: >
        Event when the application is created for the first time. Initialize all variables here. Read any
        stored data from persistant storage. The onCreate of your first (single?) Activity can be thought of
        as the main method of your whole application.
  - title: Access to a visual element from your Java code
    menu:
    - title: You often need to change visual elements from Java
    - title: Give the visual element an id in the xml layout file
      language: xml
      code: |
        <TextView android:id="@+id/title">
    - title: Declare an object in your class with same name as visual element
      language: java
      code: |
        TextView _someAppTitle;
    - title: Set object to refer to the visual element in onCreate using findViewById
      language: java
        _someAppTitle = (TextView)findViewById(R.id.title);
  - title: Use a reference to a visual element
    menu:
    - title: Change the text of a TextView
      language: java
      code: |
        _someAppTitle.setText("Now my title is different");
    - title: Most attributes in the xml have corresponding set-methods for changing them from Java
      description: >
        However, some are a bit more difficult to set/change (like android:layout_width)
  - title: Start other application
    menu:
    - title: Android has something similar to file extension associations
      description: >
        Applications can register to handle different types of "actions". Such a specification is called an
        "Intent" on Android. By using Intents, you don't need to know about which other applications are
        installed on the device but still take advantage of their features from your application.
    - title: Create an Intent object with an Action (and optional specification)
      language: java
      code: |
        Intent dosomething = new Intent(Intent.ACTION_DIAL);
    - title: Launch other application with startActivity
      language: java
      code: |
        startActivity(dosomething);
  - title: Phone-related intents
    menu:
    - title: Start the dialer with a prepared phone number
      language: javascript
      code: |
        Intent dial = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:0123456789"));
        startActivity(dial);
    - title: Start the messaging app to a prepared phone number with a text
      language: javascript
      code: |
        Intent sms = new Intent(Intent.ACTION_SENDTO, Uri.parse("sms:0123456789"));
        sms.putExtra("sms_body", "Hi there. How are you?");
        startActivity(sms);
    - title: Call a phone number immediately. Requires the CALL_PHONE permission!
      language: javascript
      code: |
        Intent call = new Intent(Intent.ACTION_CALL, Uri.parse("tel:0123456789"));
        startActivity(call);
  - title: Web-related intents
    menu:
    - title: Start the web browser and go to web site
      language: java
      code: |
        Intent browse = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.hj.se"));
        startActivity(browse);
    - title: Use the web browser to search for something
      language: java
      code: |
        Intent search = new Intent(Intent.ACTION_WEB_SEARCH);
        search.putExtra(SearchManager.Query, "android settings intent example");
        startActivity(search);
    - title: Share a text to any registered application (like Facebook)
      language: java
      code: |
        Intent share = new Intent(Intent.ACTION_SEND);
        share.putExtra(Intent.EXTRA_SUBJECT, "Good morning!");
        share.putExtra(Intent.EXTRA_TEXT, "Time to get up. This will be a good day.");
        startActivity(share);
  - title: Android Manifest
    menu:
    - title: The configuration xml file for the whole application
    - title: Contents
      menu:
      - title: Activities in the application
      - title: The permissions the application requires to run
      - title: System events that the application can handle (Intents and Broadcast receivers)
    - title: This is where the display name of the application can be changed
    - title: Editable in Eclipse via helper forms, or in its raw xml form (last tab in Eclipse)
  - title: Android Permission system
    menu:
    - title: Applications define permissions that they require in the manifest
      description: >
        Never require more permissions that you actually need
    - title: User will see these permissions before confirming to install application
      description: >
        Permissions are an all-or-nothing option. If the user isn't confident with the requested
        permission(s), the user can only select NOT to install the application at all.
    - title: Defined in root element of AndroidManifest.xml
      language: xml
      code: |
        <uses-permission android:name="android.permission.CALL_PHONE" />
    - title: http://developer.android.com/reference/android/Manifest.permission.html
  - title: Toast
    menu:
    - title: Nothing you eat or drink
      description:
        Android's name for a short text message that appears on top of the user interface and is
        automatically removed after a few seconds
    - title: Good feature for notification messages
      description: >
        Can also be used for simpler debugging purposes, like checking a value or ensuring a code
        statement is reached (without using the full debugging capabilities of Eclipse)
    - title: Show a toast message
      language: java
      code: |
        Toast.makeText(this, "Hello, world!", Toast.LENGTH_LONG).show();
  - title: More information
    menu:
    - title: Book references
      menu:
      - title: Android Programming Unleashed, Chapter 1 Introduction to Android, Creating the First Android Project
      - title: Android Programming Unleashed, Chapter 2 Basic Widgets, Overview of the Android Project Files
      - title: Android Programming Unleashed, Chapter 2 Basic Widgets, Creating and Starting an Activity
- title: Exercises
  expand: true
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  menu:
  - title: Assignment, mandatory
    description: >
      The assignment is mandatory for a passing grade in the course.
    menu:
    - title: Summarizer
      description: >
        Create an application for adding numbers and calculate a total, similar to a counter application
        but somewhat extended. It must contain the following.
      menu:
      - title: >
          Create six buttons with the following values: 1, 2, 5, 10, 20, 50.
      - title: >
          Show a total somewhere in the user interface using a TextView.
      - title: >
          When the user presses any of the six buttons, its corresponding value should be added to the
          current total and displayed in the TextView.
      - title: >
          Add a button called "Reset" that sets the current total to zero and displays it in the
          user interface.
      - title: >
          Add a button called "Undo" that subtracts the lastly added value to the total and
          displays the new current total. You only have to support undoing one addition, the very last
          addition. Store the added value from the first six buttons in a class member variable so
          you will know how much to subtract when the Undo button is pressed.
  - title: Assignment, optional
    description: >
      Perform this optional assignment to get one (1) extra credit.
    menu:
    - title: Dispatcher
      description: >
        Create an application for preparing to send a sms message. It must contain the following.
      menu:
      - title: >
          Three buttons with predefined texts like "I'll be late", "Meet me at the usual location" and
          "I'm here. Waiting outside for you".
      - title: >
          Three buttons with "Send to" and a name on them, like "Send to Alice", "Send to Bob" and
          "Send to Cathy".
      - title: >
          The main function of your app will be that the user is supposed to press one of the first
          three message buttons to select a text and then press one of the three name buttons to send
          that text as an sms message to the chosen recipient. Or rather, prepare to send by starting
          the system Actvity for sending sms messages with the chosen text and recipient prepared.
      - title: >
          You'll need to remember the chosen text in a member variable in your Activity class so you
          can retrieve it when you respond to the onClick for one of the name buttons.
      - title: >
          You'll also need to decide what phone numbers Alice, Bob and Cathy has. This will be coded into
          the application and does not need to be changable in any way.

