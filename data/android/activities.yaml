title: Activities Presentation
heading: 1. Activities
type: deck
shortname: lecture
description: >
  Slides for presentation about Activities.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Goals
  menu:
  - title: Understand what an Activity is
  - title: Create a user interface inside an Activity
  - title: Start other Activities
- title: What is an Activity?
  menu:
  - title: Main building block of an app
  - title: Represents a screen that is presented to the user
  - title: Has a life cycle with events when it gets created, hidden, revealed, closed etc
  - title: Compare it to an HTML page
    description: >
      Without an HTML page you don't have a web site. One page can link to another with the same site or
      a page on a unrelated web site. The same is true for Activities.
- title: Where is the Activity?
  menu:
  - title: Specified as an XML element in AndroidManifest.xml
  - title: Coded as an Activity-derived Java class in MainActivity.java
  - title: onCreate loads the layout XML and displays it
    language: java
    code: >
      @Override
      protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
  - title: Android creates icon for it when installed from intent filter in AndroidManifest.xml
    language: xml
    code: >
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
  - title: Android starts the specified Activity in AndroidManifest.xml when launching the app
    language: xml
    code: >
      <activity android:name="se.mobileapplab.example.MainActivity"
- title: User interface of an Activity
  menu:
  - title: Defined in layout XML file(s)
    menu:
    - title: activity_main.xml
    - title: fragment_main.xml
  - title: What happens
    menu:
    - title: onCreate is called by system
    - title: setContentView loades the activity_main.xml into the Activity
    - title: A fragment is created with the contents from fragment_main.xml and added to the Activity
  - title: Fragments - a collection of views
    menu:
    - title: Useful when building more complex user interfaces than we'll need in the course
    - title: Not a requirement if you don't need them
    - title: All user interface could be placed in activity_main.xml instead
- title: Activity recreation
  menu:
  - title: Beware that an Activity object can be destroyed any time by the system when it is not visible
  - title: An Activity object is also destroyed and recreated when device changes orientation
  - title: Views will retain their values
  - title: All other values you might depend on, must be stored persistantly by you
- title: Start other application
  menu:
  - title: Android has something similar to file extension associations
    description: >
      Applications can register to handle different types of "actions". Such a specification is called an
      "Intent" on Android. By using Intents, you don't need to know about which other applications are
      installed on the device but still take advantage of their features from your application.
  - title: Create an Intent object with an Action (and optional specification)
    language: java
    code: |
      Intent dosomething = new Intent(Intent.ACTION_DIAL);
  - title: Launch other application with startActivity
    language: java
    code: |
      startActivity(dosomething);
- title: Phone-related intents
  menu:
  - title: Start the dialer with a prepared phone number
    language: javascript
    code: |
      Intent dial = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:0123456789"));
      startActivity(dial);
  - title: Start the messaging app to a prepared phone number with a text
    language: javascript
    code: |
      Intent sms = new Intent(Intent.ACTION_SENDTO, Uri.parse("sms:0123456789"));
      sms.putExtra("sms_body", "Hi there. How are you?");
      startActivity(sms);
  - title: Call a phone number immediately. Requires the CALL_PHONE permission!
    language: javascript
    code: |
      Intent call = new Intent(Intent.ACTION_CALL, Uri.parse("tel:0123456789"));
      startActivity(call);
- title: Web-related intents
  menu:
  - title: Start the web browser and go to web site
    language: java
    code: |
      Intent browse = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.hj.se"));
      startActivity(browse);
  - title: Use the web browser to search for something
    language: java
    code: |
      Intent search = new Intent(Intent.ACTION_WEB_SEARCH);
      search.putExtra(SearchManager.Query, "android settings intent example");
      startActivity(search);
  - title: Share a text to any registered application (like Facebook)
    language: java
    code: |
      Intent share = new Intent(Intent.ACTION_SEND);
      share.putExtra(Intent.EXTRA_SUBJECT, "Good morning!");
      share.putExtra(Intent.EXTRA_TEXT, "Time to get up. This will be a good day.");
      startActivity(share);
- title: Add more activities to your app
  menu:
  - title: Good for separating different user interfaces, forms, displays etc
  - title: Built-in back button handling will automatically destroy and switch back to previous activity
  - title: Choose "File, New, Android, Android Activity" in Eclipse
    menu:
    - title: Is probably not a "Launcher Activity", meaning it will not get its own icon in the main launcher app
  - title: Things added
    menu:
    - title: A new Java class to handle the activity (onCreate etc)
    - title: A new layout xml resource file for defining the user interface
    - title: A short description/reference of the activity in the AndroidManifest.xml file
- title: Starting another Activity
  menu:
  - title: When returning from another Activity, onResume is always fired
    description: >
      But this event is also fired in a lot of other situations (when coming back from a call/other app etc)
  - title: Start another Activity
    language: java
    code: |
      Intent other = new Intent(this, OtherActivity.class);
      startActivity(other);
  - title: Start another Activity and prepare to get a result back
    language: java
    code: |
      Intent other = new Intent(this, OtherActivity.class);
      startActivityForResult(other, 123);
- title: Results from Activity
  menu:
  - title: Other activity will
    menu:
    - title: Set optional extra values to send back to calling activity
    - title: Set a resulting identifier usually to identify "Success", "Cancel" or similar
    - title: End itself by calling finish
  - title: When other activity wants to go back
    language: java
    code: |
      Intent resultData = new Intent();
      resultData.putExtra("name", "Adam");
      setResult(1000, resultData);
      finish();
  - title: Result is sent to event handler onActivityResult in the calling activity
    language: java
    code: |
      void onActivityResult(int requestId, int resultId, Intent result) {
        if (requestId==123 && resultId==1000) {
          String name = result.getStringExtra("name");
        }
      }
- title: Android Permission system
  menu:
  - title: Applications define permissions that they require in the manifest
    description: >
      Never require more permissions that you actually need
  - title: User will see these permissions before confirming to install application
    description: >
      Permissions are an all-or-nothing option. If the user isn't confident with the requested
      permission(s), the user can only select NOT to install the application at all.
  - title: Defined in root element of AndroidManifest.xml
    language: xml
    code: |
      <uses-permission android:name="android.permission.CALL_PHONE" />
  - title: http://developer.android.com/reference/android/Manifest.permission.html
- title: More information
  menu:
  - title: Book references
