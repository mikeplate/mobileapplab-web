title: Data Assignments
expand: true
description: Practical exercises to ensure that the basis of the chapter has been understood
menu:
- title: Assignment, mandatory
  description: >
    The assignment is mandatory for a passing grade in the course.
  menu:
  - title: Todo
    description: >
      Create an app where the user can add any number of todo items. A todo item is simply something
      the user would like to remember until it is complete and can be removed. For simplicity
      reasons each todo item is just a single string describing the thing to remember.
    image: android-data.png
    imagewidth: 250
    menu:
    - title: >
        Create a ListView that fills the upper area of the app. Create an EditView at the bottom
        of the app with an "Add" button to the right of it.
    - title: >
        When the user presses the "Add" button, whatever is typed into the EditView will be added
        as a new todo item. Store all todo items in an ArrayList<String> object.
    - title: >
        Show all todo items in the ListView using an ArrayAdapter<String> that you've created for storing
        the added items. You can use the standard simple_list_item_1 layout for displaying
        the individual items in the list.
    - title: >
        Store all todo items in the ArrayList when the list is changed or in onStop of the Activity.
        When the applications is created, the todo items should be read back and displayed in the
        list. Use any storage you like, but concatenating the data into a single String and
        storing them as a SharedPreference is perfectly fine.
    - title: >
        Handle the itemLongClick event for the ListView. Whenever this happens, the clicked item
        shall be removed from the ArrayList and of course the ListView and storage of the data
        updated.
- title: Assignment, optional
  description: >
    Perform this optional assignment to get one (1) extra credit.
  menu:
  - title: Todo II with SQLite database
    description: >
      Change the storage for the Todo app to use a SQLite database and extend the data for each todo
      item with a priority value.
    image: android-database1.png
    imagewidth: 250
    menu:
    - title: >
        Create a SQLiteOpenHelper derived class for handling a SQLite database. The database should
        contain a single table with three columns: the id of each row, the string for the todo item
        and an integer for the priority of the todo item. Let's assume that the only valid values
        for the priority is 1-5 where 5 being the highest priority (you don't specify that in the
        database though).
    - title: >
        Add a Spinner to the right of the EditView where the todo item string is typed. Since it will only contain
        single numbers, it should fit. The Spinner should have the values 1-5 for the priority. Whatever priority is
        selected in this Spinner when the user presses the "Add" button,
        will be the priority to store for the new todo item.
    - title: >
        Show all todo items in the database table using a SimpleCursorAdapter and a custom
        item layout XML file. Each item should display the string from the todo item and the priority
        number in two separate TextViews. The screenshot shows the priority in a circle, but that is
        not necessary for completing the assignment although feel free to style the priority in some
        distinctive way.
      image: android-database2.png
      imagewidth: 250
    - title: >
        Handle the itemClick event for the ListView. Whenever this happens, a second activity should
        start. This second activity will display a form for the properties of the selected todo item,
        that is an EditText for the title and a Spinner for the priority. It should also have a Save and
        a Delete button. When the user clicks the Save button, any changed data in the activity should
        be stored in the database and the user should return to the ListView with the list updated
        accordingly. If the user clicks the Delete button, the todo item should be removed from the
        database and the user should return to the ListView with the item gone from the list.
