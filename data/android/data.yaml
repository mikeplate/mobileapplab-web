title: Data Presentation
heading: Data
type: deck
description: >
  Slides about data structures and data storage options in Android apps.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Goals
  menu:
  - Store simple values persistantly
  - Know some Java structures for storing multiple items of data
- title: SharedPreferences to store simple values
  menu:
  - title: Store a single primitive type or a String persistantly
  - title: A good time
    menu:
    - title: To write the value is whenever the value changes
    - title: To read the value is in the onCreate method of the Activity
  - title: Write a value
    language: java
    code: |
      String name = "Mike";
      SharedPreferences.Editor storage = 
        getSharedPreferences("mydata", MODE_PRIVATE).edit();
      storage.putString("name", name);
      storage.commit();
  - title: Read a value
    language: java
    code: |
      SharedPreferences storage = getSharedPreferences("mydata");
      String name = storage.getString("name", "");
- title: Static arrays in Java
  menu:
  - title: Arrays are an important part of any programming language for handling multiple instances of data
  - title: Declare and initialize a static Array
    language: java
    code: |
      String[] names = new String[] { "Adam", "Betty", "Carl", "Donna" };
      int nameCount = names.length;
  - title: Iterate through all values in an Array
    language: java
    code: |
      for (int index = 0; index < names.length; index++) {
        Log.i("myapp", "Welcome " + names[index]);
      }
  - title: Static arrays can change value at existing index, but can't add or remove values
- title: Dynamic arrays in Java
  menu:
  - title: Can add and remove values during the array's lifetime
  - title: Declare and add values
    language: java
    code: |
      ArrayList<String> names = new ArrayList<String>();
      names.add("Adam");
      names.add("Betty");
      names.addAll(Arrays.asList("Carl", "Donna"));
  - title: Iterate through all values in an ArrayList
    language: java
    code: |
      for (int index = 0; index < names.size(); index++) {
        Log.i("myapp", "Welcome " + names.get(i));
      }
  - title: Find and remove a value
    language: java
    code: |
      int found = names.indexOf("Carl");
      if (found>=0)
        names.remove(found);
- title: Hashes in Java
  menu:
  - title: Hashes are also a common storage object
    menu:
    - title: Values are accessed with a key and not just a sequential index
    - title: Keys are stored in such a way that finding a specific key's value is very fast
    - title: Can also be called maps, hashtables, dictionaries etc
  - title: Declare and add values
    language: java
    code: |
      HashMap<String, String> capitals = new HashMap<String, String>();
      capitals.put("Sweden", "Stockholm");
      capitals.put("Norway", "Oslo");
  - title: Iterate through all values
    language: java
    code: |
      for (String country : capitals.keySet()) {
        Log.i("myapp", "The capital of " + country + " is " + capitals.get(country));
      }
  - title: Remove a value by key
    language: java
    code: |
      capitals.remove("Denmark");
- title: File operations
- title: Object serialization

