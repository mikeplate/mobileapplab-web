title: View Assignments
expand: true
description: Practical exercises to ensure that the basis of the chapter has been understood
menu:
- title: Assignment, mandatory
  description: >
    The assignment is mandatory for a passing grade in the course.
  menu:
  - title: Conversion
    description: >
      Create an app to convert values between different units. Let's pick conversion of speed
      between kilometers per hour and miles per hour, and weight betweeen kilograms and pounds, but
      feel free to choose some other units and conversions if you want.
    image: android-conversion.png
    imagewidth: 250
    menu:
    - title: >
        Create a TextView and an EditText at the top of the app. Both should fill the width of the app
        and be placed below each other. The TextView should have a simple text label like "Place specify
        a value". The EditText will hold the source value for the conversion.
    - title: >
        Create a TextView below the EditText that will hold the result from converting the source value.
        The EditText above and this TextView should have similar sizes for their text so that the user
        understands that they are related.
    - title: >
        Create four buttons for the different unit conversions. Place two buttons next to each other
        and the third and forth button below the first two. The text on the buttons will be
        "To km/h", "To mph", "To kilograms", "To pounds" signifying what unit to convert TO, assuming
        the other unit is input into the EditText.
    - title: >
        Style the created views as you see fit. The user interface will probably look a lot better
        with some extra padding and maybe some different background the the second TextView. Exactly
        what styles you specify, and what colors you use etc is up to you.
    - title: >
        Handle button presses in onClick methods for all four buttons. In each onClick, you will read the
        source value from the EditText, convert it to a number (int is perfectly ok), then perform the
        mathematical conversion according to the units and finally format the result back to a string and
        display it in the second TextView as the result. The resulting text should also have the unit for
        the converted value after it. For instance, if the user have input 120 and pressed "To mph", the
        result should display "75 mph". When converting the source value from a string to a number, you
        can choose to convert to an int, float or double variable. That is not important. If your
        conversion can handle decimals or only whole numbers is up to you.
- title: Assignment, optional
  description: >
    Perform this optional assignment to get one (1) extra credit.
  menu:
  - title: Conversion II
    image: android-conversion2-portrait.png
    imagewidth: 250
    description: >
      Create a similar app to the previous assignment. However, instead of using an EditText for specifying
      the source value, it will have four buttons that add different amounts to the source value or
      resets it back to zero. The type of conversion will also be specified by a Spinner instead of
      the previous four buttons.
    menu:
    - title: >
        Replace the top EditText with a TextView. It will later receive different source values when
        the user presses other buttons.
    - title: >
        Add a Spinner between the two TextViews.
      description: >
        The Spinner will be used to choose the type of conversion.
        Create a string array as an XML resource file with the four different types of conversion that can be made:
        "mph to km/h", "km/h to mph", "pounds to kilograms" and "kilograms to pounds". Reference
        the string array resource from the Spinner so that it will display the options to the user.
    - title: >
        Change the four buttons previously used for choosing the type of conversion.
      description: >
        Now they will contain the following for texts instead: "0", "+50", "+10" and "+1". Each button text represents how much
        the source value will change, when the button is pressed. The button "0" will set the source
        value to zero. The idea is that the user can use these buttons to define any value the user
        wants to convert, and that this might be easier and faster than using the numerical keyboard and
        the previous EditText.
    - title: >
        Expand the buttons vertically so that they take up 50% of all the remaining area after the top
        TextViews and Spinner has occupied their part of the screen. This will actually require multiple
        nested LinearLayouts to make it work.
    - title: >
        Style the four buttons exactly the same way
      description: >
        by creating a resource XML file with a style
        containing at least two different attributes, like "android:layout_margin" and "android:background".
        Or whatever you like. Feel free to use your imagination. The important part is that you can
        create the styles.xml file correctly and then reference it for each of the four buttons to have
        them receive the same style attributes as you've defined in the styles.xml file.
    - title: >
        Create a variant of the layout for landscape orientation.
      image: android-conversion2-landscape.png
      imagewidth: 400
      description: >
        Create a new resource folder in the
        project where the qualifier orientation is landscape. Add a layout XML file to that folder
        and paste a copy of the XML from the existing layout and then make changes so everything on the
        screen will be better layed out for landscape. The current layout before this step is good
        enough for portrait orientation but will probably feel very cramped in landscape. Exactly how
        you do that, or what you change, is up to you.
    - title: >
        Note that styling the text of each option in the Spinner is not as easy as it could or should be.
        Setting an attribute on the Spinner will have no effect och the TextViews that actually
        represent the different options in the Spinner. Feel free to search information about how this
        can be done, but you don't need to style the Spinner to be approved even though the app will
        probably look better if you DO find a way (advanced).
