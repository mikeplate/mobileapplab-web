title: View Assignments
expand: true
description: Practical exercises to ensure that the basis of the chapter has been understood
menu:
- title: Assignment, mandatory
  description: >
    The assignment is mandatory for a passing grade in the course.
  menu:
  - title: Conversion
    description: >
      Create an app to convert values between different units. Let's pick conversion of speed
      between kilometers per hour and miles per hour, and weight betweeen kilograms and pounds, but
      feel free to choose some other units and conversions if you want.
    image: android-conversion.png
    imagewidth: 250
    menu:
    - title: >
        Create a TextView and an EditText at the top of the app. Both should fill the width of the app
        and be placed below each other. The TextView should have a simple text label like "Place specify
        a value". The EditText will hold the source value for the conversion.
    - title: >
        Create a TextView below the EditText that will hold the result from converting the source value.
        The EditText above and this TextView should have similar sizes for their text so that the user
        understands that they are related.
    - title: >
        Create four buttons for the different unit conversions. Place two buttons next to each other
        and the third and forth button below the first two. The text on the buttons will be
        "To km/h", "To mph", "To kilograms", "To pounds" signifying what unit to convert TO, assuming
        the other unit is input into the EditText.
    - title: >
        Style the created views as you see fit. The user interface will probably look a lot better
        with some extra padding and maybe some different background the the second TextView. Exactly
        what styles you specify, and what colors you use etc is up to you.
    - title: >
        Handle button presses in onClick methods for all four buttons. In each onClick, you will read the
        source value from the EditText, convert it to a number (int is perfectly ok), then perform the
        mathematical conversion according to the units and finally format the result back to a string and
        display it in the second TextView as the result. The resulting text should also have the unit for
        the converted value after it. For instance, if the user have input 120 and pressed "To mph", the
        result should display "75 mph". When converting the source value from a string to a number, you
        can choose to convert to an int, float or double variable. That is not important. If your
        conversion can handle decimals or only whole numbers is up to you.
- title: Assignment, optional
  description: >
    Perform this optional assignment to get one (1) extra credit.
  menu:
  - title: Conversion II
    description: >
      Extend the previous Conversion app with the following functionality.
    menu:
    - title: >
        Replace the four buttons for choosing unit conversion with a Spinner. Add a "Convert" button that
        performs the conversion instead. The user will first choose the wanted conversion from the
        Spinner, and then press the "Convert" button to calculate the result.
    - title: >
        Create three buttons with the following values: 1, 10, 50. Each time one of these buttons
        is pressed, the corresponding amount will be added to the current source value in the EditView.
        Use the same onClick method in your Java code for all buttons and determine what value to
        actually add from the onClick argument.
    - title: >
        Give the three added buttons in the previous step some custom styling. It can be a different text
        size, background color and so on. Put the styling in a style-element in an XML file and reference
        this style from the three buttons.

