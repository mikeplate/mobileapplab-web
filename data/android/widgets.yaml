title: Widgets Presentation
heading: Widgets
type: deck
description: >
  Slides about how to create widgets for your home screens.
  Choose "print" link for a printer-friendly page with all slides after one another.
menu:
- title: Goals
  menu:
  - title: Build a simple home screen widget
- title: Home Screen Widgets
  menu:
  - title: App Widgets
  - title: The word "widget" is also used as a generel term for Views
  - title: Home Screen Widget is a View that can be placed on the home screen
    menu:
    - title: Sizes
    - title: Limited
- title: Steps
  menu:
  - title: Specify initial properties for the widget
  - title: Tell Android about your widget
  - title: Define the initial layout of your widget
  - title: Respond to a broadcast to create widget
  - title: React to events on the widget
- title: Specify initial properties for the widget
  menu:
  - title: Create new XML resource file in xml directory
    menu:
    - title: Root element is appwidget-provider
    - title: Attributes describe the widget
  - title: Size
    menu:
    - title: android:minWidth
    - title: android:minHeight
  - title: Preview image
    menu:
    - title: android:previewImage as a drawable
  - title: Layout
    menu:
    - title: android:initialLayout reference to other layout XML file
- title: Define the initial layout of your widget
  menu:
  - title: This is just an ordinary layout XML file
  - title: The layout and its views will be created in Android system, not your process
  - title: Limited to what kinds of views and customizations you can do
- title: Tell Android about your widget
  menu:
  - title: Create a receiver XML element in AndroidManifest.xml
    language: xml
    code: |
      <receiver android:name=".MyWidget" android:label="My Widget Label">
        <intent-filter>
          <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
        </intent-filter>
        <meta-data
          android:name="android.appwidget.provider"
          android:resource="@xml/mywidget_specification" />
      </receiver>
- title: Class that handles app widget events
  menu:
  - title: Events are actually so called Broadcasts
  - title: Create new class for handling the widget
    menu:
    - title: Class extends AppWidgetProvider
  - title: Implement onUpdate method
    menu:
    - title: Event handler for the widget
    - title: Called when widget is added to home screen
    - title: Called when it is time to update the contents of the widget
    - title: Without it, the widget would always look the same and not respond to any interaction
    - title: Responsible for telling Android what RemoteViews to use for the widget
- title: The Widget handler class
  menu:
  - title: Example
    language: java
    code: |
      public class MyWidget extends AppWidgetProvider {
        @Override
        public void onUpdate(Context context, AppWidgetManager manager, int[] widgetIds) {
        }
      }
- title: Remote Views
  menu:
  - title: An app widget is defined by a RemoteViews object
    menu:
    - title: You don't have access to the actual View objects
    - title: The RemoteViews is just a specification, actual objects are created in Android system outside of your process
  - title: This means
    menu:
    - title: You can't use the ordinary set-methods for changing the views and their styles
    - title: You are limited to the types of changes supported by methods in the RemoteViews class
    - title: You can only respond to events using PendingIntents and the events supported by the RemoteViews class
- title: Customize the widget in onUpdate
  menu:
  - title: All updates mean that you must create a new RemoteViews object
    menu:
    - title: You don't have access to the widget's actual Views so they can't be changed
    - title: A widget update always mean that the whole contents of the widget is replaced
  - title: Possibly choose different layouts depending on some value
  - title: Change text displayed in widget
  - title: Change other properties of views, like background color
  - title: Remove and drop widget after each new version to be sure latest code runs
- title: Creating and setting the RemoteView
  menu:
  - title: Example
    language: java
    code: |
      public class MyWidget extends AppWidgetProvider {
        @Override
        public void onUpdate(Context context, AppWidgetManager manager, int[] widgetIds) {
          RemoteView view = new RemoteView(context.getPackageName(), R.layout.my_widget);
          view.setTextViewText(R.id.text, "Some text to show in widget!");
          for (int i = 0; i < widgetIds.length; i++) {
            manager.updateAppWidget(widgetIds[i], view);
          }
        }
      }
- title: Notifications
  menu:
  - title: Displayed at top of Android screen
  - title: Drag down from top to reveal larger display of all notifications
  - title: Have concept of RemoteViews in common with app widgets
    menu:
    - title: In it's simplest form, no layout XML is needed
  - title: Android handles
    menu:
    - title: Display the notification
    - title: Small icon in top bar, larger icon in revealed view
    - title: Title and longer text in revealed view
    - title: Starting activity via intent, if requested, when notification clicked
    - title: Remove the notification when dismissed by user
- title: Display a notification
  menu:
  - title: Exemple
    language: java
    code: |
      Notification.Builder not = new Notification.Builder(context);
      not.setContentTitle(String.format("Yeah, now we're at %d", _count));
      not.setContentText("Longer text shown when revealed view displayed");
      not.setSmallIcon(R.drawable.ic_launcher);

      NotificationManager manager = (NotificationManager)context.getSystemService(Activity.NOTIFICATION_SERVICE);
      manager.notify(1234, not.build());

