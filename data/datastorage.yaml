title: Data
description: >
  Store data persistantly in the browser or on a web server. Send http requests from JavaScript
  in the browser.
menu:
- title: Lecture Presentation
  heading: 4. Data
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Content
    menu:
    - Offline Capabilities
    - Web Storage
    - JSON
    - Network Requests
    - Web APIs
  - title: Offline Capabilities
    menu:
    - title: Network connection required as a default to start mobile web app
    - title: HTML5 Offline Applications
      description: >
        HTML5 introduces offline capabilities where a network connection is not required the second time
        a web application is started (a web address is visited in the browser).
    - title: Easy to turn on
      description: >
        Getting an app to start offline in the browser is easy. Getting it to work with server side
        storage etc once the app is online again is a lot harder (syncing issues), even though there are
        libraries to help.
  - title: Offline Manifest
    menu:
    - title: Procedure to get a web app to work offline
    - title: Specify a manifest file name in html element
      language: html
      code: <html manifest="myfile.manifest">
    - title: Ensure that web server is sending correct mime type
      description: >
        This is necessary for the browser to recognize and use the file. The mime type sent in the
        reponse from the server must be "text/cache-manifest". Set in web server software or via
        adding your own header in server side script.
    - title: Create the file with information about what to cache locally
      language: text
      code: |
        CACHE MANIFEST
        index.html
        style.css
        logic.js
        https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js
  - title: Storing a value persistantly
    menu:
    - title: By persisting a value, we expect it to be around when the page is reloaded or visited on another occation
      description: A global JavaScript variable will not do. It will lose its value on reload.
    - title: Options for persistance
      menu:
      - title: Cookies
      - title: HTML5 Web Storage
      - title: HTML5 Web Sql Database
      - title: Server side storage
    - title: We'll focus on Web Storage in the course
  - title: HTML5 Web Storage
    menu:
    - title: An API for storing strings persistantly in the browser
      description: The browser is responsible for storing the data somewhere, probably in a local file
    - title: Every stored string has a key (also a string) that uniquely identifies that particular value
    - title: Store a value
      language: javascript
      code: window.localStorage.setItem("key-name", "Mike");
    - title: Read a previously stored value
      language: javascript
      code: alert(window.localStorage.getItem("key-name"));
    - title: Keys for which a value has never been stored has the value null
      language: javascript
      code: if (window.localStorage.getItem("key-name")==null) alert("No value stored!");
  - title: HTML5 Web Storage limitations
    menu:
    - title: Desktop browsers might ask user for confirmation before storing a value
      description: >
        Interestingly enough, mobile browsers stores it immediately without asking the user for permission.
        Better user experience, but if the reason for asking is security, then perhaps mobile browsers should ask too.
    - title: Most browsers has a limit of 5 MB per web site for web storage
      description: >
        More than that can be approved by the browser asking the user if it is ok to extend storage
        (don't depend on this since it is browser specific).
    - title: Can only store strings
      description: >
        The JSON format will help in storing complex data like arrays and objects with properties.
  - title: JSON - JavaScript Object Notation
    menu:
    - title: A data format that is part of JavaScript
      description: >
        Today it is just as commonly used, if not more, as XML for specifying complex data in a text format.
        Not just for JavaScript nowadays.
    - title: Creating JSON
      description: >
        Creating JSON is relatively easy once you know the format. Any programming language that can concatenate
        a string will be able to create JSON data, but for complex objects a helper/API/library is useful.
    - title: Parsing JSON
      description: >
        Parsing JSON, that is converting from a JSON data string into real values, arrays, objects etc is
        more work and will need an API or library in your language of choice. JavaScript has it built in, in modern
        browsers.
  - title: JavaScript Objects
    menu:
    - title: Short introduction to JavaScript objects
    - title: Can be created with new Object or a literal using { and }
    - title: Properties of an object are created as you use them - no declaration necessary
      language: javascript
      code: |
        var person = new Object();
        person.name = "Bob";
        alert("Yes, the name is " + person.name + " without any problem!");
        var someone_else = {};
        someone_else.name = "Jane";
        someone_else.age = 45;
  - title: JavaScript Arrays
    menu:
    - title: Arrays are zero, one or more objects/values in a single variable
      description: >
        Dynamic code that is prepared to handle any number of persons/objects etc is a lot easier to write
        using arrays.
    - title: Can be created with new Array or literal using [ and ]
    - title: Number of objects in the array is contained in length property
    - title: Reference a particular item with the index operator []
    - title: Add items to an array with push
    - title: Delete items from an array with splice
    - title: Example
      language: javascript
      code: |
        var many = new Array();
        many.push(5);
        many.push(10);
        many.push(20);
        for (var i = 0; i < many.length; i++) {
          alert(many[i]);
        }
        many.splice(1, 1); // Remove the middle value (10) in the three value array
  - title: Using JSON with JavaScript
    menu:
    - title: Defining a JavaScript object using JSON in the code
      language: javascript
      code: |
        var obj = { name: "John", born: 1983 };
        alert("My name is " + obj.name);
        obj.born = 1984; // Fix wrong birth year
        var arr = [5, 88, "Carl", 7, { name: "Judy", born: 1990 }];
    - title: Creating JSON from a complex object
      language: javascript
      code: var jstring = JSON.stringify(obj);
    - title: Parsing JSON into an object
      language: javascript
      code: var obj = JSON.parse(jstring);
    - title: Parsed JSON requires property names (keys) to be in quotes!
      language: text
      code: |
        { "name": "John", "born": 1983 }
    - title: Now you can store any JavaScript object/variable in Web Storage!
  - title: Using JSON in separate files
    menu:
    - title: Store data in separate file for better organization
      description: >
        Storing in separate file can also easily be changed to a server side script that dynamically
        returns information from a database (but we try to avoid server side script in the course).
    - title: Include with script element
      description: >
        Requires that the file also contains valid JavaScript syntax for setting a variable. That
        variable with then be available from other JavaScript code in the same page.
    - title: Include with Ajax
      description: >
        Use JavaScript to send an http request to the server without reloading/changing the page.
  - title: Include JSON with script element
    menu:
    - title: Create a script element to your JSON file in the HTML
      language: html
      code: <script src="my-data-variable.json"></script>
    - title: Declare a variable and define the data in the my-data-variable.json file
      language: javascript
      code: |
        var dataArray = [
          { name: John, born: 1957 },
          { name: Alice, born: 1977 }
        ];
    - title: Anywhere after the script element, the variable is accessible from your own JavaScript
      language: javascript
      code: alert("Received " + dataArray.length + " persons in data array!");
  - title: Network Requests from JavaScript
    menu:
    - title: AJAX - Asynchronous JavaScript And Xml
      description: >
        However, nowadays it's seldom xml so maybe AJAJ would be more appropriate.
    - title: Fetch data or html without reloading this page or loading some other page
    - title: Positives
      menu:
      - Smoother user experience since the AJAX request is invisible to the user
      - More efficient since only changed/added part of a page needs to be downloaded
      - Better separation of html/design and the data of the application
    - title: Negatives (difficulties)
      menu:
      - No default user interface to inform the user that we're waiting for something
      - No default history (back/forward) handling when page changes
  - title: Performing a network request with JavaScript
    menu:
    - title: Use a library like jQuery to hide browser differences and create cleaner code
    - title: But let's look at the core functionality without a library
      language: javascript
      code: |
        var http = new XMLHttpRequest();
        http.open("GET", "/mydata.json");
        http.onreadystatechange = function() {
          if (http.readyState==4 && http.status==200) {
            alert("Yay, I got som data here " + http.responseText);
          }
        };
        http.send();
    - title: onreadystatechange can fire multiple times to report progress, wait for readyState==4
             to be sure all data has arrived
    - title: Ensure that the http.status code is 200 which means everything was ok without any
             server side errors
    - title: Noet that nothing is requested over the wire until send is called
  - title: jQuery
    menu:
    - title: The most spread JavaScript library in the world
    - title: Usage - just include with script element
      language: html
      code: |
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>
    - title: Network request with jQuery
      language: javascript
      code: |
        $.ajax({
          url: "/mydata.json",
          dataType: "json",
          success: function(result) {
            alert("Yay, I got som data here " + result);
          },
          error: function(message) {
            alert("Oops! Something went wrong. "+message);
          }
        });
  - title: Cross Domain Requests (XDR)
    menu:
    - title: Blocked by all browsers for security reasons
      description: >
        JavaScript on one domain (site) may not make http requests to other domains (sites).
        If user is logged in at those sites, like Facebook, any site would be able to retrieve
        a lot of sensitive data (and change it!).
    - title: Solutions
      menu:
      - Other site supports JSONP for allowing simpler requests (no posting possible)
      - Other site supports CORS for non-sensitive data and/or known sites
      - Create server side script in your own site to proxy the data (no login/cookies)
      - Enclose your web application in PhoneGap (or similar solution)
  - title: JSONP - JSON with Padding
    menu:
    - title: Wrap (pad) the response in a JavaScript function call
      description: >
        This means that you if you insert a script element with the src attribute set to
        the network request you'd like to make, you can provide the function to call and
        thereby intercept and receive the data. A standard of specifying the
        function name as the callback query string parameter has evolved.
    - title: Example
      language: javascript
      code: |
        var scriptElement = document.createElement("script");
        scriptElement.src = "http://someothersite.com/my-data.json?callback=yay";
        document.body.appendChild(scriptElement);
        function yay(result) {
          alert("Yay, I got some data here " + result);
        }
    - title: Problems
      menu:
      - title: No errors can be detected, like site down or http error response
      - title: Can't send POST or other requests (only GET works)
  - title: Web APIs
    menu:
    - title: To successfully build custom applications using data from other services, you need an API
    - title: Many well known web sites/services has APIs
    - title: Access usually requires registering and getting an Application ID of some sort
    - title: The service can use the AppID to limit your usage, or stop you from using the service
    - title: The AppID should only be used in server side scripts, otherwise it is public knowledge and anyone can use your ID
    - title: Many sites also require a user to be authenticated to the site, like being logged in to Facebook

- title: Exercises
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  expand: true
  menu:
  - title: Assignment 1 (mandatory)
    menu:
    - title: Store a single value
      menu:
      - title: Create any web application or use a previous assignment where something can be changed by
               the user, like switching the background color every time an element is clicked/touched.
      - title: Extend that application with storing the current value in web storage every time it is
               changed.
      - title: Make sure that when the application starts (the page is loaded) that same
               value is read and used (by, for instance, setting the initial background color).
  - title: Assignment 2 (optional)
    menu:
    - title: Store and retrieve JSON data
      menu:
      - title: Create a web application with at least two input fields and a save button.
      - title: The labels and contents of the input fields are not important,
               lets say it is a name and a phone number.
      - title: When the user clicks the save button, the values in the input
               fields should be saved in JSON format in web storage.
      - title: When the web application starts (the page is loaded), any saved
               values in JSON format should be read and placed as default values in the
               two input fields.
  - title: Assignment 3 (optional)
    menu:
    - title: Retrieve and show JSON data from network request
      menu:
      - title: Continue on the previous assignment or create a new web application with similar content.
      - title: Create a separate file with JSON data for the application. It
               can be the default data to use for all new users. It should have the same
               data as is stored in web storage and the input fields.
      - title: Create a new button/link in the application to load that JSON data file.
      - title: When the user clicks the new button, read the JSON data file by
               doing a network request from JavaScript.
      - title: Fill the input fields with the data from the JSON file.

########## Demos

- title: Offline availability
  type: demo
  shortname: offline
  description: >
    This page will be available even when there is no network connection.
- title: Counter storing a single value
  type: app
  shortname: counter
  description: >
    Persist a single value in web storage and retrieve it when the page is loaded.
- title: Counter storing multiple values
  type: app
  shortname: counter-multiple
  description: >
    Persist multiple values in web storage, each with its individual key, and retrieve them when the
    page is loaded.
- title: Counter storing values in an array
  type: app
  shortname: counter-array
  description: >
    Persist multiple values in an array and use JSON to save it to web storage. The array is retrieved
    when the page is loaded.
- title: Inventory
  type: app
  description: >
    An inventory application where products and the amount in inventory of them, can be added to a list.
    Products can be added, deleted and updated in the list. The contents of the list is stored in
    memory in a JavaScript array and persistant to web storage.
- title: JSON data
  type: demo
  shortname: json
  description: >
    Deliver JSON into your web application in several different ways. Output the same html sample from
    the made up JSON data.
- title: Google Finance API access
  type: demo
  shortname: google-finance
  description: >
    Use data from other sites by accessing their APIs. If you only want to run JavaScript in the browser
    the third party API need to be open and support JSONP (or CORS for your site, or all sites).
- title: Google Drive Sheet
  type: demo
  shortname: google-drive-sheet
  description: >
    Even better for data storage is if the third party site that can deliver data via JSONP, also has
    the possiblity of creating your own documents/data and modifying them. Google Drive is such a service.
