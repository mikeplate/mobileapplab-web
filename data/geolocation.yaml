title: Geolocation
description: >
  Retrieve information about where the user is located in the world. Use geolocation both from a mobile
  web application and inside of PhoneGap.
menu:
- title: Note
  description: >
    The contents are still under development so be sure to check back here closer to the actual
    lecture and the week when the chapter is presented. The exercises are complete and you can
    start with them. If I do feel the need to change something in an exercise (to make them clearer
    or easier), any assignment you've submitted to the original specification will of course be approved.
- title: Lecture Presentation
  heading: 6. Geolocation
  type: deck
  shortname: lecture
  description: >
    Slides displayed in the browser. Choose "print" link for a printer-friendly
    page with all slides after one another.
  menu:
  - title: Content
    menu:
    - Geolocation
    - Geolocation API
    - Canvas
  - title: Geolocation
    menu:
    - title: A position on earth
    - title: Latitude
      menu:
      - Horizontal lines on the globe
      - Position relative to the equator
      - Positive for north. Negative for south.
    - title: Longitude
      menu:
      - Vertical lines on the globe
      - Position relative to the Meridian that passes through Greenwich, London
      - Positive for east. Negative for west.
  - title: Calculations
    menu:
     - title: Unit
       menu:
       - Single number like 57.7787
       - Or in degress+minutes like 57Â°46.722' N
     - title: Distance between two locations
       menu:
       - Not as simple as using pythagoras theorem since the earth is not flat
       - Haversine formula
       - Databases capable of such calculations are called spatial
     - title: Direction from one location to another
       menu:
       - Also called bearing
       - Specified in 0-360 degrees where 0 is north, 90 is east, 180 south and 270 west
     - title: Sunrise and sundown
       menu:
       - Can be determined from location and the time of year
     - title: Geolocation API in browsers
       menu:
       - Not formally an HTML5 specification, but it was formed in the same time frame.
  - title: Determine geolocation on a mobile device
    menu:
    - title: IP to country database
      description: >
        All IPs are registered to a company, located in a known country. Does not always tell the
        whole truth. IP to country databases are freely available on the net.
    - title: WiFi triangulation
      description: >
        WiFi routers broadcast their names and a unique ID. By driving around and collecting all those
        identifiers and the current position, a database is built. Detecting strength/proximity to
        those identifiers gives a good accuracy inside of cities with many WiFi routers.
        Not freely available.
    - title: Mobile network triangulation (3G)
      description: >
        Information provided by the phone company (carrier) by also measuring the strength/proximity to
        mobile network antennas, and knowing where those antennas are located.
    - title: GPS - Global Position System
      description: >
        Satellite signals that can be received by a GPS receiver in a mobile device. Usually the best
        accuracy, but also most demanding on battery.
  - title: Geolocation API
    menu:
    - title: Available in all modern browsers
    - title: Always requires consent from the user before delivering the position to a web application
    - title: No specific control over what method is used
      description: >
        Can specify "high" accuracy, but not defined exactly what that would mean.
    - title: Determine current location as a one time measurement
    - title: Determine location as a continuous movement
      description: >
        Not that reliable in web browsers since any continuous events about location might stop when
        the user uses other applications (like gets an incoming call)
  - title: Use the Geolocation API
    menu:
    - title: Call navigator.geolocation.getCurrentPosition
      description: >
        Always asynchronous, meaning function will return immediately and you provide a function that
        the API will call once the location has been determined.
    - title: Specify a function to call on success
    - title: Specify a function to call on error
    - title: Specify other settings for making the determination
  - title: Use the Geolocation API
    menu:
    - title: Example
      language: javascript
      code: |
        navigator.geolocation.getCurrentPosition(whenPosition, whenError, 
          { timeout: 20000 });
        function whenPosition(result) {
          alert(result.coords.latitude + " " + result.coords.longitude);
        }
        function whenError(error) {
          alert(error.message);
        }
  - title: Optional settings as third argument to getCurrentPosition
    menu:
    - title: timeout
      description: >
        The maximum amount of time to wait for a location in milliseconds
    - title: maximumAge
      description: >
        The maximum amount of time since a previously retrieved and cached location can be used
        to report a position. Can be set to Infinity to always use any cached location.
    - title: enableHighAccuracy
      description: >
        Set to true to enforce using better accuracy. Usually means that we'd like to wait for
        a GPS position and whatever that might mean with regards to battery use. The final choice
        of what to do is still up to the specific browser.
  - title: Position information in object sent to callback
    menu:
    - title: result.coords
      menu:
      - title: result.coords.latitude
      - title: result.coords.longitude
      - title: result.coords.accuracy
        description: The supposed accuracy of the position specified in meters
      - title: result.coords.altitude
        description: >
          The altitude in meters above sea level for this position, or null if the browser can't
          determine this
      - title: result.coords.heading
        description: >
          The direction/heading in which the browser has detected movement (0-360), or null if it is
          unknown (or no movement detected)
      - title: result.coords.speed
        description: >
          The speed at which the browser has detected movement, in meters per second, or null if it
          is unknown (or no movement detected)
    - title: result.timestamp
      description: >
        The time at which the location was determined, in milliseconds from 1970-01-01.
  - title: Type of error in argument sent to callback
    menu:
    - title: Compare error.code to predefined constants in the error object
    - title: error.PERMISSION_DENIED
      description: >
        The user declined permissions to report the location
    - title: error.POSITION_UNAVAILABLE
      description: >
        The position of the device could not be determined
    - title: error.TIMEOUT
      description: >
        The length of time specified to getCurrentPosition has elapsed before a location could be
        determined
  - title: Continuous geolocations
    menu:
    - title: When tracking movement
    - title: Calls function as soon as position changes
      description: >
        Exactly how often is up to the browser and of course dependant on the detected changes in location.
    - title: Call navigator.geolocation.watchPosition
      description: >
        Same arguments as getCurrentPosition
    - title: Store returned value from watchPosition
      description: >
        Identifier that can be used to stop the tracking
    - title: Call navigator.geolocation.clearWatch
      description: >
        To stop the tracking. No more callbacks will be made to the functions in the watchPosition call.
- title: Exercises
  description: Practical tasks to perform and ensure that the basis of the chapter has been understood.
  expand: true
  menu:
  - title: Assignment 1 (mandatory)
    menu:
    - title: Fetch and display the geolocation of the user
      menu:
      - title: Create a web application that fetches the position of the user using the geolocation API.
      - title: Display the position in latitude and longitude somewhere in the page.
      - title: Pick a predetermined location, like where you live, and calculate the distance between
               the two locations and display it to the user when the position of the user has been
               determined.
      - title: Use the JavaScript function for calculating distance from the demos.
  - title: Assignment 2 (optional)
    menu:
    - title: Homing application
      menu:
      - title: Create a homing application that can tell you how far and in what direction a custom
               location is from where you are now. The application should have two buttons.
      - title: The first button determines the position of the user and stores it as the "home"
               position. Nothing else but a successful message about the location have been 
               determined need to be shown.
      - title: The second button also determines the position of the user. If a "home" has been
               set with the first button, the application should display the distance and direction
               from the current position to the home position. The direction can be displayed in
               degrees from north (assuming the user will know where north is).
      - title: Use web local storage for storing the home position.
      - title: Use the JavaScript functions for calculating distance and direction from the demos.
  - title: Assignment 3 (optional)
    menu:
    - title: Homing application in PhoneGap with compass
      menu:
      - title: Extend the previous assignment and package it as a PhoneGap application.
      - title: Use the watchPosition function in the geolocation API to get continuous information
               about the position.
      - title: Use the compass API in PhoneGap to also determine the direction that the user is facing.
      - title: Use both the compass direction and the direction to the home position to display in
               which way to move to get home in a better way than just "degrees from north". You don't
               have to display a graphical compass. It is enough to show "left" or "right" to tell
               the user in which way to face.
      - title: Note that the compass is not changable in the Android Emulator so you need a physical
               device to really try out your application, but for the assignment it is of course to
               have written code that accepts the same values from the PhoneGap API.

########## Demos

- title: Show location
  type: demo
  shortname: location
  description: >
    Use the Geolocation API to find your own place in the world. Link to Google Maps.
- title: GeoIP
  type: demo
  shortname: geoip
  description: >
    Use a simple text file database to lookup in which country a specific IP is located.
- title: Cities
  type: demo
  shortname: cities
  description: >
    Use a simple text file database to lookup cities close to your location.
- title: Daylight
  type: demo
  shortname: daylight
  description: >
    Calculate the times at which the sun rises and sets for today, using the location of the user
    and the current date.
- title: Swarm
  type: demo
  shortname: swarm
  description: >
    Send your own location to the server and display the location of all others that have visited
    the same web application previously.
- title: Estimated Time of Arrival
  type: demo
  shortname: eta
  description: >
    Use watchPosition to retrieve continuous information about the location. Pick a predetermined
    location and calculate at what time the user should arrive at that location, using the previous
    movement and speed as an estimation.
    
